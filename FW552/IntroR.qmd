---
title: <span style="color:white"><b>Simple R Intro</b></span>
title-slide-attributes:
  data-background-image: /img/coding.png
  background-opacity: "0.45"
format:
  revealjs:
    chalkboard: true
---

## [RStudio]{style="color:green;"}

![](../img/RStudio1.png)

## [RStudio]{style="color:green;"}

![](../img/RStudio2.png)

## [Installing Packages]{style="color:green;"}

![](../img/RStudio4.png)


## [The language of R]{style="color:green;"}

. . .

### [**Objects**]{style="color:blue;"}

A storage place for information; stored in the "Environment"

<br>

::: fragment
*'Attributes'* describes the structure or information of the object
:::

## [The language of R]{style="color:green;"}

### [**Objects**]{style="color:blue;"}

![](../img/RStudio3.png)

## [The language of R]{style="color:green;"}

### [**Objects**]{style="color:blue;"}

```{r}
#| echo: TRUE
#| eval: TRUE

# y is an 'object' that is assigned the value 3
y = 3
y
```

<br>

::: fragment
```{r}
#| echo: TRUE
#| eval: TRUE

# Same operation '=' '<-'
y <- 3
```
:::

## [The language of R]{style="color:green;"}

### [**Objects**]{style="color:blue;"}

```{r}
#| echo: TRUE
#| eval: TRUE
# We can create new objects from objects
y2 = y-2
y2
```

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
# We can do math with our objects
# Mind your parentheses (order of operation)
y*2 / y*4

y*2 / (y*4)

```

:::

<!-- ## [Challenge 1]{style="color:green;"} {.scrollable} -->

<!-- Compute the diameter (d) of the Earth (in km) at the equator using this formula for the circumfrance (c)... -->

<!-- $$d = \frac{c}{\pi}$$ -->

<!-- ::: {style="font-size: 75%;"} -->
<!-- -   c = 24,901.55 miles -->
<!-- -   1 km = 0.621 miles -->
<!-- -   **Hint** type in 'pi' to see what you get -->
<!-- ::: -->

<!-- ::: {style="font-size: 75%;"} -->
<!-- 1.  Convert the circumference from miles to km. -->
<!-- 2.  Write the formula in R by defining objects and the values given to computer d in km. -->
<!-- ::: -->

<!-- ```{r} -->
<!-- #| echo: TRUE -->
<!-- #| eval: TRUE -->
<!-- #| code-fold: true -->
<!-- #| code-summary: "Click for Answer" -->

<!-- c.km = 24901.55/0.621 -->

<!-- d = c.km/pi -->

<!-- ``` -->



## [The language of R]{style="color:green;"}

### [**Functions**]{style="color:blue;"}

'does stuff'; creates or manipulates objects

::: fragment
*'Arguments'* are the types of things a function is asking for; the inputs
:::

## [The language of R]{style="color:green;"}

[**object**]{style="color:orange;"} = [function]{style="color:blue;"}([argument]{style="color:purple;"} = input1, [argument]{style="color:purple;"} = input2)

<br>

. . .

[**object**]{style="color:orange;"} = [function]{style="color:blue;"}(input1, input2)


<br>

. . .

[**this**]{style="color:orange;"} = [sign]{style="color:blue;"}([x]{style="color:purple;"} = -5)

<br>

::: fragment
```{r}
#| echo: TRUE
#| eval: TRUE
sign(-5)
sign(5)
```
:::


## [The language of R]{style="color:green;"} {.scrollable}

### [**Functions**]{style="color:blue;"}

```{r}
#| echo: TRUE
#| eval: TRUE

# function - 'c' - concatenate
y = c(1,2,3,4,5,6)
```

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
is.numeric(y)
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
# The function 'class' has the argument 'x'
is.numeric(x = y)
```

:::

## [The language of R]{style="color:green;"}

### [**Functions**]{style="color:blue;"}

```{r}
#| echo: TRUE
#| eval: FALSE
# How to find out the arguments of a function?
?is.numeric
```

![](../img/is.numeric.png)

## [The language of R]{style="color:green;"}

### Wrapping functions

```{r}
#| echo: TRUE
#| eval: TRUE
# Functions are commonly 1) wrapped, 2) have multiple arguments
x = matrix( 
            data = c(1,2,3,4,5,6),
            nrow = 2,
            ncol = 3
            )
```

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
x
```

:::

## [The language of R]{style="color:green;"}

::: columns
::: {.column width="50%"}

**Values**

- numeric
- integer
- character
- factor

:::

::: {.column width="50%"}

**Objects**

- vector
- matrix
- array
- list
- dataframe
- [S3, S4, S5, and beyond ]{style="color:purple;"}

:::

:::


## [Types of Values]{style="color:green;"} {.scrollable}

### Numeric

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
y = 3
class(y)
```

:::

<br>

::: fragment

### Integer
```{r}
#| echo: TRUE
#| eval: TRUE
y = integer(3)
class(y)
```

:::

<br>

::: fragment

### Character

```{r}
#| echo: TRUE
#| eval: TRUE
y = "habitat"
class(y)
```

:::

<br>

::: fragment

### Factor
```{r}
#| echo: TRUE
#| eval: TRUE
y = factor("habitat")
class(y)
```

:::

## [Types of Objects]{style="color:green;"} {.scrollable}

### Vector

```{r}
#| echo: TRUE
#| eval: TRUE

# An ordered collection indexed 1,2,...n
# Using the function 'c' to concetanate
z1 = c(4,5,6)
z1

```

The value 4 is in element/index/position 1 of the vector

The value 6 is in element/index/position 3 of the vector


<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE

# the dimension of a vector
length(z1)
```
:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
# A vector of characters
z2 = c("dog","cat","horse")
z2
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
z3 = c("dog","1","horse")
z3
```

:::

<!-- <br> -->

<!-- ::: fragment -->
<!-- ```{r} -->
<!-- #| echo: TRUE -->
<!-- #| eval: TRUE -->
<!-- z3 = c("dog",1,"horse") -->
<!-- z3 -->
<!-- ``` -->
:::

##  [Types of Objects]{style="color:green;"}{.scrollable}

### Subsetting a vector

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
z3 = c("dog",
       "1",
       "horse",
       "chicken"
       )
z3[2]
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
2:4
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
z3[2:4]
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
z3[c(2,4)]
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
z3[-1]
```

:::

##  [Types of Objects]{style="color:green;"}{.scrollable}

### Vector of factors

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE

z4 = factor(
            c("dog", 
              "dog", 
              "cat",
              "horse"
              )
           )
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
z4
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
levels(z4)
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
summary(z4)
```

:::

## [Types of Objects]{style="color:green;"}{.scrollable}

### Matrix

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE

x = matrix(
            c(1,2,3,4,5,6),
            nrow = 2, 
            ncol = 3
           )
```

:::

<br>

::: fragment


```{r}
#| echo: TRUE
#| eval: TRUE
x
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
#rows and columns
dim(x)
```

:::

<br>


## [Types of Objects]{style="color:green;"}{.scrollable}

### Subsetting a matrix

```{r}
#| echo: TRUE
#| eval: TRUE

# get element of row 1 and column 2
x[1,2]
```


<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE

# get all elements of row 2
x[2,]
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE

# same as
x[2,1:3]
```

:::

## [Types of Objects]{style="color:green;"}{.scrollable}

### Array


```{r}
#| echo: TRUE
#| eval: TRUE
# ARRAY - more than two dimensions
z5 = array(
            c("a","b","c","d","1","2","3","4"), 
            dim = c(2,2,2)
           )
```


<!-- <br> -->

<!-- ::: fragment -->
<!-- ```{r} -->
<!-- #| echo: TRUE -->
<!-- #| eval: TRUE -->

<!-- dim(z5) -->

<!-- ``` -->
<!-- ::: -->

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE

z5
```

:::

## [Types of Objects]{style="color:green;"}{.scrollable}

### List

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
# LIST - a bucket - will take anything
my.list = list(z1, z2, z3, z4, z5)
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
#Subset a list
my.list[[1]]
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE

my.list[[4]]
```

:::

## [Types of Objects]{style="color:green;"}{.scrollable}

### Data frame

E.g., a row for each observation and a column for each variable (can be different types).

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE

x = data.frame(outcome = c(1,0,1,1),
               exposure = c("yes", "yes", "no", "no"),
               age = c(24, 55, 39, 18)
               )
x
```

:::

## [Types of Objects]{style="color:green;"}{.scrollable}

### Subset data.frame

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
x$exposure
```

:::

<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
x['exposure']
```

:::


<br>

::: fragment

```{r}
#| echo: TRUE
#| eval: TRUE
x[,2]
```

:::


```{r, echo=FALSE,results='hide'}
knitr::purl("IntroR.qmd")
```
