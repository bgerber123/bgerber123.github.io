{
  "hash": "f53d2711fcf960fa564d01be4d49df27",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Markdown, Equations, and the Normal Distribution\"\nauthor: \"Brian Gerber\"\ndate: \"8/24/2022\"\noutput: html_document\n---\n\n\n<style type=\"text/css\">\nbody, td {\n   font-size: 18px;\n}\ncode.r{\n  font-size: 20px;\n}\npre {\n  font-size: 20px\n}\n</style>\n\n\n\n\n\n# R Markdown\n\nRStudio can help you use Markdown to create HTML/PDF/Word documents that can embed R code, HTML, CSS, latex (type setting language), and more. This is a good [website](https://www.markdownguide.org/) to checkout for markdown coding.\n\nWe will use markdown as a way accomplish homework. This way you can provide code and document it simultaneously. I would suggest to not try and get too fancy at first. Keep it simple. Write-text in RStudio as you would in any word processor. Write R code in R chunks. Use \"echo=FALSE\" and \"echo=TRUE\" for a code chink to either not print the code or to print the code. \n\n### The Normal Distribution\n\nThis probability function is the most widely used and heard of. It has amazing utility. Let's get to know it a bit more intimately.\n\nLet's create an R chunk and plot some data by simulating from a random variable `y`. Let's define this variable such that it can take on values of any real number from $-\\infty$ to $\\infty$. So, $y \\in (-\\infty, \\infty)$ or $y \\in \\mathbb{R}$. \n\nMore specifically, let's define `y` as having a probability density function of a Normal/Gaussian distribution, \n\n$$y \\sim \\text{Normal}(\\mu, \\sigma).$$\n\nAnd stated more generally as,\n\n$$f(y;\\mu, \\sigma) = [y|\\mu, \\theta].$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate data from a standard normal distribution (mu = 0, sd = 1)\n  set.seed(54235)\n  y=rnorm(100,0,1)\n\n# Create a histogram\n  hist(y)\n```\n\n::: {.cell-output-display}\n![](Markdown-and-R-Stuff_files/figure-html/chunk1-1.png){width=672}\n:::\n:::\n\n\nLet's create a new plot and not output the code. This time we will see the true probability distribution, not simulated values.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](Markdown-and-R-Stuff_files/figure-html/chunk2-1.png){fig-align='center' width=480}\n:::\n:::\n\n\nHTML code can be embedded, such as turning text a different <span style=\"color:red\">color</span>.\n\nSimple text formatting can be done directly, such as *italics* or **bolding**.\n\n<hr style=\"border:2px solid gray\">\n\n# Equations \n\nMarkdown uses latex to embed very nice equations. For example, the expectation of random variable `y` is the integral from limits a to b of `y` multiplied by the probability density of `y`:\n\n$$E[y] = \\int_a^b y \\times f(y; \\mu, \\sigma) dy$$\nMore so, you can use a lot of functionality of latex and make the expectation more clear as,\n$$\n\\begin{align*} \nE[y] =& \\int_{-\\infty}^{\\infty}  y\\times \\frac{1}{\\sigma\\sqrt(2\\pi)}e^{-1/2(\\frac{y-\\mu}{\\sigma})^2} dy \\\\\nE[y] =& \\mu.\n\\end{align*}\n$$\n\n<hr style=\"border:2px solid gray\">\n\n## Approximating an Integral\n\nLet's understand this math a bit more. What we are doing is for every value of `y` possible ($-\\infty$ to $\\infty$), we multiple it by its probability density. Then we take all these values and add them (i.e., the integral). \n\nIt's a bit easier to understand what the math is doing by making an approximation. \n\nWe can approximate the integral by breaking it into pieces to calculate `y` times the $f(y; \\mu, \\sigma)$ and then sum all these values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a histogram and save the values\n  set.seed(14341)\n  y.hist=hist(rnorm(1000,0,1),breaks=8, freq=FALSE,ylim=c(0,0.4),\n              main=\"Random Normal Samples\")\n  \n# Plot the true probabiltiy denisty.\n  curve(dnorm(x,0,1),add=TRUE,lwd=3,col=2)\n  legend(\"topright\",lwd=3,col=c(2),legend=\"True Distribution\")\n```\n\n::: {.cell-output-display}\n![](Markdown-and-R-Stuff_files/figure-html/chunk3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Get the x-axis mid-points of each bin\n  mid.point.x=y.hist$mids\n  mid.point.x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -3.5 -2.5 -1.5 -0.5  0.5  1.5  2.5  3.5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get the y-axis values (probability density) for each value of the . \n  prob.y=y.hist$density\n  prob.y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.003 0.021 0.134 0.348 0.343 0.133 0.017 0.001\n```\n\n\n:::\n\n```{.r .cell-code}\n#multiple these value and sum them\n  sum(prob.y*mid.point.x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.021\n```\n\n\n:::\n:::\n\n\nDoes this answer make sense?\n\nWhat if you did the same approximation with more simulated values and bins?\n\n<br>\n\n<br>\n\n",
    "supporting": [
      "Markdown-and-R-Stuff_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}