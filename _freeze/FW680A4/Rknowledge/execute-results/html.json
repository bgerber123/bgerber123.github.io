{
  "hash": "1ace4e52baea78b81cd0293fbf772114",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle:  \" \"\nformat:\n  revealjs:\n    chalkboard: true\n    multiplex: true\n---\n\n\n\n## FW 680A4 (Wildlife Ecology Modeling)\n\nWe will regularly use the [R programming language](https://www.r-project.org/about.html) to manipulate data and objects, create figures, and use functions.\n\n\n<br>\n\nI expect students to know some fundamentals of base R.\n\n\n<br>\n\nI am not expecting advanced knowledge of highly specialized and efficient programming.\n\n\n<br>\n\nMore so, I don't want learning base R to be an impediment of understanding what we are trying to accomplish.\n\n\n## R Knowledge {.scrollable}\n\n**Some things I expect students to know**\n\n- what an **object ** is\n\n- how to subset and manipulate different types of objects\n\n  - vectors, lists, matrices, dataframes, etc.\n\n#### E.g.....\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A vector of integers stored as an object...\n\nvec = seq(1,10)\n\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# A Matrix...\n\nmat = matrix(vec,nrow=2,ncol=5)\n\nmat[2,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# A list\n\nmy.list = list(vec, mat)\n\nmy.list[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n```\n\n\n:::\n:::\n\n\n:::\n\n## R Knowledge {.scrollable}\n\nAccessing a dataframe\n\n#### E.g.....\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n:::\n\n\n## R Knowledge {.scrollable}\n\nAccessing a dataframe\n\n#### E.g.....\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars$mpg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars[,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars['mpg']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     mpg\nMazda RX4           21.0\nMazda RX4 Wag       21.0\nDatsun 710          22.8\nHornet 4 Drive      21.4\nHornet Sportabout   18.7\nValiant             18.1\nDuster 360          14.3\nMerc 240D           24.4\nMerc 230            22.8\nMerc 280            19.2\nMerc 280C           17.8\nMerc 450SE          16.4\nMerc 450SL          17.3\nMerc 450SLC         15.2\nCadillac Fleetwood  10.4\nLincoln Continental 10.4\nChrysler Imperial   14.7\nFiat 128            32.4\nHonda Civic         30.4\nToyota Corolla      33.9\nToyota Corona       21.5\nDodge Challenger    15.5\nAMC Javelin         15.2\nCamaro Z28          13.3\nPontiac Firebird    19.2\nFiat X1-9           27.3\nPorsche 914-2       26.0\nLotus Europa        30.4\nFord Pantera L      15.8\nFerrari Dino        19.7\nMaserati Bora       15.0\nVolvo 142E          21.4\n```\n\n\n:::\n:::\n\n\n\n## R Knowledge {.scrollable}\n\nAccessing a dataframe\n\n#### E.g.....\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find the location of certain values\n\nwhich(mtcars$mpg>20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  8  9 18 19 20 21 26 27 28 32\n```\n\n\n:::\n\n```{.r .cell-code}\n# manipulating those elements\n\nmtcars$mpg[which(mtcars$mpg>20)] = NA\nmtcars$mpg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   NA   NA   NA   NA 18.7 18.1 14.3   NA   NA 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7   NA   NA   NA   NA 15.5 15.2 13.3 19.2   NA   NA   NA 15.8 19.7\n[31] 15.0   NA\n```\n\n\n:::\n:::\n\n\n## R Knowledge {.scrollable}\n\nWhat a **function ** is\n\n  - how to specify attributes of a function\n  - how to wrap functions\n\n#### E.g.....\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specifying attributes of a function\n\nmean(mtcars$mpg,\n     na.rm=TRUE\n     )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15.9\n```\n\n\n:::\n:::\n\n\n:::\n\n## R Knowledge {.scrollable}\n\nWhat a **function ** is\n\n  - how to specify attributes of a function\n  - how to wrap functions\n\n#### E.g.....\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specifying attributes of a function\n\n# Wrapping functions\nsim = rnorm(10, \n            mean = mean(mtcars$mpg,na.rm=TRUE),\n            sd = sd(mtcars$mpg,na.rm=TRUE)\n)\n \nsim\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 19.15655 20.76382 12.48391 17.50938 15.78719 11.69483 18.39723 14.80989\n [9] 17.34404 17.19724\n```\n\n\n:::\n:::\n\n\n\n## R Knowledge\n\nEveryone codes differently.\n\n<br>\n\nYou may use **tidy** over base R. That is fine. \n\n<br>\n\nIf you are concerned about coding, talk to Brian (202A Wagar)\n\n<br>\n\nIf you need resources for learning R, please go [here](/FW680A4/) and click on the tab *Learning R*. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}