{
  "hash": "a7e1df32244f96dc75d4ef64c86ed9f1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle:  <span style=\"color:black\">Generalized Linear Models II <br><br><br><br></span>\ntitle-slide-attributes:\n   data-background-image: /img/pika.png\nformat:\n  revealjs:\n    chalkboard: true\n    multiplex: true\n---\n\n\n## Objectives\n\n\n```{=html}\n<style type=\"text/css\">\n\nbody, td {\n   font-size: 14px;\n}\ncode.r{\n  font-size: 30px;\n}\npre {\n  font-size: 12px\n}\n</style>\n```\n\n\n-   Poisson Regression\n-   categorical variables\n-   variable interactions\n-   multicollinearity\n\n## Poisson Regression\n\nWe model the counts of American pika ($y_{i}$) at each site $i = 1...n$ as a Poisson random variable with parameter $\\lambda$ being a function of our $p$ site-level variables in  $n$ x $p$ design matrix ($\\textbf{X}$) and coefficients $\\boldsymbol{\\beta}$ as,\n\n$$\n\\begin{align*}\n\\textbf{y} \\sim & \\text{Poisson}(\\boldsymbol{\\lambda})\\\\\n\\text{log}(\\boldsymbol{\\lambda}) =& \\textbf{X}\\boldsymbol{\\beta}\\\\\n\\boldsymbol{\\lambda} =& e^{\\textbf{X}\\boldsymbol{\\beta}}.\n\\end{align*}\n$$\n\n## Data  {.scrollable}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](glm2_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n## Counts by Site\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](glm2_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## Fit Model {.scrollable}\n\nInterpret the Coefficients\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel = glm(y~site,data=dat, \n            family = poisson(link = 'log')\n            )\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = y ~ site, family = poisson(link = \"log\"), data = dat)\n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  1.07329    0.09245  11.609  < 2e-16 ***\nsiteSite 2  -0.66783    0.15879  -4.206  2.6e-05 ***\nsiteSite 3   0.33158    0.12117   2.736  0.00621 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 148.739  on 119  degrees of freedom\nResidual deviance:  99.134  on 117  degrees of freedom\nAIC: 425.43\n\nNumber of Fisher Scoring iterations: 5\n```\n\n\n:::\n:::\n\n\n## Numerical Optimization of Likelihood\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel$converged\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nmodel$method\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"glm.fit\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmodel$boundary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nmodel$iter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nmodel$control\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$epsilon\n[1] 1e-08\n\n$maxit\n[1] 25\n\n$trace\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n## Side-Bar: Negative Log-Likelihood Function {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  #Here is our negative log-likelihood function with three\n  #parameters - beta0, beta1, and beta2 (1)\n  #inputs = design matrix X\n  neg.log.like = function(par,X) {\n    \n    lam=par[1]*X[,1]+par[2]*X[,2]+par[3]*X[,3]\n    \n    sum(-dpois(y,lambda = exp(lam),log = TRUE))\n  }\n```\n:::\n\n\n\n## Numerical Optim. for MLEs\n\n::: {.cell}\n\n```{.r .cell-code}\n#use optim with initial values and define the lower and upper limits of the possible values\n  fit1 <- optim(\n    par = c(0,0,0), #start\n    X=X,\n    fn = neg.log.like,\n    method = \"L-BFGS-B\",\n    lower = c(-10, -10, -10),\n    upper = c(10, 10, 10)\n  )\n```\n:::\n\n\n::: {.fragment}\n\n#### Comparison\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n        (Intercept) siteSite 2 siteSite 3\nglm.fit    1.073299 -0.6678340  0.3315581\nours       1.073294 -0.6678294  0.3315763\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## Controlling Dummy Coding {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat$site.re=relevel(dat$site,ref=\"Site 2\")\nlevels(dat$site.re) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Site 2\" \"Site 1\" \"Site 3\"\n```\n\n\n:::\n:::\n\n\n<br>\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel2 = glm(y~site.re,\n             data=dat, \n             family = poisson(link = 'log')\n            )\nsummary(model2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = y ~ site.re, family = poisson(link = \"log\"), data = dat)\n\nCoefficients:\n              Estimate Std. Error z value Pr(>|z|)    \n(Intercept)     0.4055     0.1291   3.141  0.00169 ** \nsite.reSite 1   0.6678     0.1588   4.206 2.60e-05 ***\nsite.reSite 3   0.9994     0.1510   6.618 3.63e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 148.739  on 119  degrees of freedom\nResidual deviance:  99.134  on 117  degrees of freedom\nAIC: 425.43\n\nNumber of Fisher Scoring iterations: 5\n```\n\n\n:::\n:::\n\n::: \n\n## Same Model Different Estimates {.scrollable}\n\n#### Coeficients\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n       (Intercept) siteSite 2 siteSite 3\nModel1   1.0732945 -0.6678294  0.3315763\nModel2   0.4054651  0.6678294  0.9994056\n```\n\n\n:::\n:::\n\n\n#### Predictions\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n              1         2        3        4         5\nModel1 1.073294 0.4054651 1.404871 1.073294 0.4054651\nModel2 1.073294 0.4054651 1.404871 1.073294 0.4054651\n```\n\n\n:::\n:::\n\n\n::: {.fragment}\n\n#### Design Matrix\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) dat$siteSite 2 dat$siteSite 3\n1           1              0              0\n2           1              1              0\n3           1              0              1\n4           1              0              0\n5           1              1              0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) dat$site.reSite 1 dat$site.reSite 3\n1           1                 1                 0\n2           1                 0                 0\n3           1                 0                 1\n4           1                 1                 0\n5           1                 0                 0\n```\n\n\n:::\n:::\n\n\n::: \n\n## More Control!\n\n[Deviation/Effect Coding Link](https://stats.stackexchange.com/questions/52132/how-to-do-regression-with-effect-coding-instead-of-dummy-coding-in-r) \n\n[Lots of options](https://stats.oarc.ucla.edu/r/library/r-library-contrast-coding-systems-for-categorical-variables/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  model3=glm(y~site, \n             data=dat, \n             family = poisson(link = 'log'),\n             contrasts = list(site = contr.sum)\n            )\n```\n:::\n\n\n## Deviation Coding Interpretation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoef(model3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)       site1       site2 \n  0.9612101   0.1120844  -0.5557450 \n```\n\n\n:::\n:::\n\n\nIntercept = grand mean of site-means (log-scale)\n\nbeta1 1 = effect difference of Site 1 from Grand Mean\n\nbeta2 2 = effect difference of Site 2 from Grand Mean\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#The coefficient for site-level 3 (difference from the grand mean) \nsum(coef(model3)[-1]*(-1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4436606\n```\n\n\n:::\n:::\n\n\n:::\n\n## More Control Again!\n\n#### Contrasts\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Use effect coding to make the intercept the grand mean\n  model4=glm(y~0+site, \n             data=dat, \n             family = poisson(link = 'log')\n            )\n\n# No shared intercept\nhead(model.matrix(~0+site,data=dat),n=6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  siteSite 1 siteSite 2 siteSite 3\n1          1          0          0\n2          0          1          0\n3          0          0          1\n4          1          0          0\n5          0          1          0\n6          0          0          1\n```\n\n\n:::\n:::\n\n\n\n## Same Model Different Estimates\n\n\n#### Coeficients\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n       (Intercept) siteSite 2 siteSite 3\nModel1   1.0732945 -0.6678294  0.3315763\nModel2   0.4054651  0.6678294  0.9994056\nModel3   0.9612101  0.1120844 -0.5557450\nModel4   1.0732945  0.4054651  1.4048707\n```\n\n\n:::\n:::\n\n\n#### Predictions\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n              1         2        3        4         5\nModel1 1.073294 0.4054651 1.404871 1.073294 0.4054651\nModel2 1.073294 0.4054651 1.404871 1.073294 0.4054651\nModel3 1.073294 0.4054651 1.404871 1.073294 0.4054651\nModel4 1.073294 0.4054651 1.404871 1.073294 0.4054651\n```\n\n\n:::\n:::\n\n\n## Taking Control\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX = model.matrix(~STUFF)\n\nmodel = glm(y~ 0 + X, ...)\n```\n:::\n\n\n## Poisson Regression (offset)\n\nWhat if our counts of pika are at plots with different sizes?\n\nPlot size ($\\textbf{A}$) needs to be controlled for. But, we don't want to estimate an effect as it's part of the design.\n\n$$\n\\begin{align*}\n\\textbf{y} \\sim & \\text{Poisson}(\\frac{\\boldsymbol{\\lambda}}{\\textbf{A}})\\\\\n\\text{log}(\\frac{\\boldsymbol{\\lambda}}{\\textbf{A}}) =& \\textbf{X}\\boldsymbol{\\beta}\n\\end{align*}\n$$\n\n## Offset\n\n\n::: {.cell}\n\n:::\n\n\nEquivalent\n\n$$\n\\begin{align*}\n\\text{log}(\\frac{\\boldsymbol{\\lambda}}{\\textbf{A}}) =& \\beta_0 + \\beta_1 \\textbf{x}_{1}\\\\\n\\text{log}(\\boldsymbol{\\lambda}) =& \\beta_0 + \\beta_1 \\textbf{x}_{1} + 1\\times \\textbf{A}\n\\end{align*}\n$$\n\n## Offset Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel.rate1 = glm(y~site+offset(log(area)),\n            data=dat, \n            family = poisson(link = 'log')\n            )\n\nmodel.rate2 = glm(y~site,\n            offset = log(area),\n            data=dat, \n            family = poisson(link = 'log')\n            )\n\ncoef(model.rate1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)  siteSite 2  siteSite 3 \n -0.7712156  -0.1180465   0.1512329 \n```\n\n\n:::\n\n```{.r .cell-code}\ncoef(model.rate2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)  siteSite 2  siteSite 3 \n -0.7712156  -0.1180465   0.1512329 \n```\n\n\n:::\n:::\n\n\n## \n\n\n```{=html}\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<center><span style=\"color:#C70039; font-size: 65px;\";><b>Variable Interactions</b></span></center>\n\n```\n\n\n<!-- ## Additive Model -->\n\n<!-- #### Categorical (2 levels) and Continuous Variable -->\n\n<!-- $$ -->\n<!--     y_{i} \\sim \\text{Normal}(\\mu_{i}, \\sigma^2)\\\\ -->\n<!--  \\mu_{i} = \\beta_0+(\\beta_1\\times x_{1,i}) + (\\beta_2\\times x_{2,i}) -->\n<!-- $$ -->\n\n<!-- $x_{1,i} =$ indicator of <span style=\"color:blue\">site 2</span> (1) or not (0) -->\n\n<!-- $x_{2,i} =$ is a continuous numeric value -->\n\n\n<!-- ## Additive Model {.scrollable} -->\n\n<!-- ```{r, echo=TRUE, include=TRUE, eval=TRUE} -->\n<!--   #A continuous and categorical variable  -->\n<!--   x=as.factor(rep(c(\"Site 1\",\"Site 2\"),n/2)) -->\n<!--   levels(x) -->\n<!--   x.var=model.matrix(~x)[,2] -->\n<!-- ``` -->\n\n<!-- <br> -->\n\n<!-- . . . -->\n\n<!-- ```{r, echo=TRUE, include=TRUE, eval=TRUE} -->\n<!--   #Simulate x2 variable -->\n<!--   set.seed(54334) -->\n<!--   x2=rpois(n,100) -->\n\n<!--   #Parameters -->\n<!--   b0=50 -->\n<!--   b1=-50 -->\n<!--   b2=4 -->\n\n<!--   #Mean   -->\n<!--   mu=b0+b1*x.var+b2*x2 -->\n\n<!--   #Simualte Date   -->\n<!--   set.seed(43243) -->\n<!--   y=rnorm(n,mean=mu,sd=50) -->\n\n<!--   # fit the model -->\n<!--   model4=glm(y~x+x2) -->\n\n<!--   coef(model4) -->\n\n<!-- ``` -->\n\n<!-- <br> -->\n\n<!-- . . . -->\n\n<!-- ```{r, echo=TRUE, include=TRUE, eval=TRUE} -->\n<!--   #Confidence intervals of coefs -->\n<!--   confint(model4) -->\n\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- <br> -->\n\n<!-- ```{r, echo=TRUE, include=TRUE, eval=TRUE} -->\n<!--   # Summary   -->\n<!--   summary(model4) -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- <br> -->\n\n<!-- ```{r, echo=TRUE, include=TRUE, eval=TRUE} -->\n\n<!--   # Fitted Values -->\n<!--   newdata=expand.grid(x,x2) -->\n<!--   head(newdata) -->\n<!--   colnames(newdata)=c(\"x\",\"x2\") -->\n\n\n<!--   preds=predict(model4,newdata=newdata,type=\"response\", -->\n<!--                 se.fit = TRUE) -->\n<!-- ``` -->\n\n<!-- ## Additive Model Plot 1 -->\n\n<!-- ```{r, echo=TRUE, include=TRUE, eval=TRUE}   -->\n<!--   library(sjPlot) -->\n<!--   plot_model(model4, type = \"pred\", terms = c(\"x\")) -->\n<!-- ``` -->\n\n<!-- ## Additive Model Plot 2 -->\n\n<!-- ```{r, echo=TRUE, include=TRUE, eval=TRUE}   -->\n<!--   plot_model(model4, type = \"pred\", terms = c(\"x2\",\"x\")) -->\n<!-- ``` -->\n\n<!-- ## Interaction Model -->\n\n<!-- #### Categorical (2 levels) and Continuous Variable -->\n\n<!-- $$ -->\n<!--     y_{i} \\sim \\text{Normal}(\\mu_{i}, \\sigma^2)\\\\ -->\n<!--   \\mu_{i} = \\beta_0+(\\beta_1\\times x_{1,i}) + (\\beta_2\\times x_{2,i}) + (\\beta_3*(x_{1,i}\\times x_{2,i})) -->\n<!-- $$ -->\n\n<!-- $x_{1,i} =$ indicator of <span style=\"color:blue\">site 2</span> (1) or not (0) -->\n\n<!-- $x_{2,i} =$ is a numeric value -->\n\n<!-- $x_{1,i} \\times x_{2,i}=$ is zero for <span style=\"color:blue\">site 1</span> values and the numeric value for site 2 values -->\n\n\n\n<!-- ## Interaction Model {.scrollable} -->\n\n<!-- ### Categorical (2 levels) and Continuous Variable -->\n\n<!-- ```{r, echo=TRUE, include=TRUE, eval=TRUE}   -->\n\n<!--   # Simulate Variables -->\n<!--   x=as.factor(rep(c(\"Site 1\",\"Site 2\"),n/2)) -->\n<!--   levels(x) -->\n<!--   x.var=model.matrix(~x)[,2] -->\n\n<!--   set.seed(5453) -->\n<!--   x2=rpois(n,100) -->\n\n<!--   # Parameters  -->\n<!--   b0=50 -->\n<!--   b1=-50 -->\n<!--   b2=4 -->\n<!--   b3=-20 -->\n\n<!--   # Mean   -->\n<!--   mu = b0+b1*x.var+b2*x2+b3*(x.var*x2) -->\n\n<!--   #Simulate Data -->\n<!--   set.seed(43243) -->\n<!--   y=rnorm(n,mean=mu,sd=10) -->\n\n<!--   # fit the model -->\n<!--   model5=glm(y~x2*x) -->\n<!--   model5.1=glm(y~x+x2+x:x2) -->\n\n<!--   #comparison   -->\n<!--   rbind(coef(model5),coef(model5.1)) -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- <br> -->\n\n<!-- ```{r, echo=TRUE, include=TRUE, eval=TRUE}   -->\n<!--   #Confidence intervals of coefs -->\n<!--   confint(model5) -->\n<!-- ``` -->\n\n<!-- ## Interaction Model -->\n\n<!-- ```{r, echo=TRUE, include=TRUE, eval=TRUE}   -->\n<!--   #Summary   -->\n<!--   summary(model5) -->\n<!-- ``` -->\n\n<!-- ## Interaction Model Plot -->\n\n<!-- ```{r, echo=TRUE, include=TRUE, eval=TRUE}   -->\n<!--   theme_set(theme_sjplot()) -->\n<!--   plot_model(model5, type = \"pred\", terms = c(\"x2\",\"x\")) -->\n<!-- ``` -->\n\n",
    "supporting": [
      "glm2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}