{
  "hash": "053dceb05361de6403087ddccfe1cf33",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle:  <span style=\"color:black\">Generalized Linear Models II <br><br><br><br></span>\ntitle-slide-attributes:\n   data-background-image: /img/pika.png\nformat:\n  revealjs:\n    chalkboard: true\n    multiplex: true\n---\n\n\n## Objectives\n\n<!-- knitr::purl(\"./FW680A4/glm2.qmd\", output=\"./FW680A4/glm2.R\") -->\n\n\n```{=html}\n<style type=\"text/css\">\n\nbody, td {\n   font-size: 14px;\n}\ncode.r{\n  font-size: 30px;\n}\npre {\n  font-size: 12px\n}\n</style>\n```\n\n\n-   Poisson Regression\n-   Numerical Optimization\n-   Categorical variables >2 levels\n-   Effect Coding\n-   Variable Combinations\n\n## Pika Study\n\n![](/img/pika2.png)\n\nWe sample plots of high elevation rocky outcrops, counting the number of American Pika within each plot; plot sizes are the same size.\n\n## Poisson Regression\n\nWe model the counts of American pika ($y_{i}$) at each site $i = 1...n$ as a Poisson random variable with parameter $\\lambda$ being a function of our $p$ site-level variables in  $n$ x $p$ design matrix ($\\textbf{X}$) and coefficients $\\boldsymbol{\\beta}$ as,\n\n$$\n\\begin{align*}\n\\textbf{y} \\sim & \\text{Poisson}(\\boldsymbol{\\lambda})\\\\\n\\text{log}(\\boldsymbol{\\lambda}) =& \\textbf{X}\\boldsymbol{\\beta}\\\\\n\\boldsymbol{\\lambda} =& e^{\\textbf{X}\\boldsymbol{\\beta}}.\n\\end{align*}\n$$\n\n## Data  {.scrollable}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](glm2_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n## Counts by Site\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](glm2_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## Fit Model {.scrollable}\n\n<span style=\"color:purple\">Interpret the Coefficients</span>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel = glm(y~site,\n            data=dat, \n            family = poisson(link = 'log')\n            )\n```\n:::\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = y ~ site, family = poisson(link = \"log\"), data = dat)\n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)   0.6549     0.1140   5.747 9.09e-09 ***\nsiteSite 2   -1.0116     0.2207  -4.584 4.56e-06 ***\nsiteSite 3    0.1221     0.1565   0.780    0.435    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 341.36  on 119  degrees of freedom\nResidual deviance: 305.76  on 117  degrees of freedom\nAIC: 496.33\n\nNumber of Fisher Scoring iterations: 6\n```\n\n\n:::\n:::\n\n\n:::\n\n## Numerical Optimization of Likelihood\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel$converged\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nmodel$method\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"glm.fit\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmodel$boundary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nmodel$iter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\nmodel$control\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$epsilon\n[1] 1e-08\n\n$maxit\n[1] 25\n\n$trace\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n## Side-Bar {.scrollable}\n\n#### Negative Log-Likelihood Function \n\n\n::: {.cell}\n\n```{.r .cell-code}\n  #Here is our negative log-likelihood function with three\n  #parameters - beta0, beta1, and beta2 (1)\n  #inputs = design matrix X\n  neg.log.like = function(par,X) {\n    \n    #linear model of parameters par and design matrix (X)\n    lam=par[1]*X[,1]+par[2]*X[,2]+par[3]*X[,3]\n    \n    #neg log-likelihood\n    sum(-dpois(y,lambda = exp(lam),log = TRUE))\n  }\n```\n:::\n\n\n\n## Numerical Optim. for MLEs\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Use optim function with initial values and define the lower and upper limits of the possible values\n  fit1 <- optim(\n    par = c(0,0,0), #start\n    X = X,\n    fn = neg.log.like,\n    method = \"L-BFGS-B\",\n    lower = c(-10, -10, -10),\n    upper = c(10, 10, 10)\n  )\n```\n:::\n\n\n\n::: {.fragment}\n\n#### <span style=\"color:purple\">Comparison</span>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n        (Intercept) siteSite 2 siteSite 3\nglm.fit   0.6549253  -1.011598  0.1221050\nours      0.6549260  -1.011601  0.1221027\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## Control over Dummy Coding {.scrollable}\n\n<span style=\"color:purple\">Make 'Site 2' the intercept</span>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat$site.re = relevel(dat$site,ref=\"Site 2\")\nlevels(dat$site.re) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Site 2\" \"Site 1\" \"Site 3\"\n```\n\n\n:::\n:::\n\n\n<br>\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel2 = glm(y~site.re,\n             data = dat, \n             family = poisson(link = 'log')\n            )\nsummary(model2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = y ~ site.re, family = poisson(link = \"log\"), data = dat)\n\nCoefficients:\n              Estimate Std. Error z value Pr(>|z|)    \n(Intercept)    -0.3567     0.1890  -1.887   0.0591 .  \nsite.reSite 1   1.0116     0.2207   4.584 4.56e-06 ***\nsite.reSite 3   1.1337     0.2173   5.218 1.81e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 341.36  on 119  degrees of freedom\nResidual deviance: 305.76  on 117  degrees of freedom\nAIC: 496.33\n\nNumber of Fisher Scoring iterations: 6\n```\n\n\n:::\n:::\n\n::: \n\n## Same Model Different Estimates {.scrollable}\n\n#### <span style=\"color:purple\">Coeficients</span>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n       (Intercept) siteSite 2 siteSite 3\nModel1      0.6549    -1.0116     0.1221\nModel2     -0.3567     1.0116     1.1337\n```\n\n\n:::\n:::\n\n\n#### <span style=\"color:purple\">Predictions</span>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n            1       2     3      4       5\nModel1 0.6549 -0.3567 0.777 0.6549 -0.3567\nModel2 0.6549 -0.3567 0.777 0.6549 -0.3567\n```\n\n\n:::\n:::\n\n\n::: {.fragment}\n\n#### <span style=\"color:purple\">Design Matrix</span>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) dat$siteSite 2 dat$siteSite 3\n1           1              0              0\n2           1              1              0\n3           1              0              1\n4           1              0              0\n5           1              1              0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept) dat$site.reSite 1 dat$site.reSite 3\n1           1                 1                 0\n2           1                 0                 0\n3           1                 0                 1\n4           1                 1                 0\n5           1                 0                 0\n```\n\n\n:::\n:::\n\n\n::: \n\n## More Control!\n\n[Deviation/Effect Coding Link](https://stats.stackexchange.com/questions/52132/how-to-do-regression-with-effect-coding-instead-of-dummy-coding-in-r) \n\n[Lots of options](https://stats.oarc.ucla.edu/r/library/r-library-contrast-coding-systems-for-categorical-variables/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  model3=glm(y~site, \n             data = dat, \n             family = poisson(link = 'log'),\n             contrasts = list(site = contr.sum)\n            )\n```\n:::\n\n\n## Deviation Coding Interpretation {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoef(model3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)       site1       site2 \n  0.3584266   0.2964994  -0.7151015 \n```\n\n\n:::\n:::\n\n\nIntercept = `grand` mean of site-means (log-scale), not mean of all observations\n\n::: {.fragment}\n$\\beta_{0} + \\beta_{1} \\times 1 + \\beta_{2}\\times 0$ \n:::\n\n::: {.fragment}\n$0.3584266 + 0.2964994   \\times 1 + 0$ \n:::\n\n::: {.fragment}\n$\\beta_{1}$ = effect difference of Site 1 from Grand Mean\n:::\n\n::: {.fragment}\n$\\beta_{2}$ = effect difference of Site 2 from Grand Mean\n:::\n\n::: {.fragment}\n\n#### The coefficient for site-level 3 (difference from the grand mean) \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(coef(model3)[-1]*(-1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4186021\n```\n\n\n:::\n:::\n\n\n:::\n\n\n\n## Intuition Check {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean.group = aggregate(y, by=list(site=site),FUN=mean)\nmean.group\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    site     x\n1 Site 1 1.925\n2 Site 2 0.700\n3 Site 3 2.175\n```\n\n\n:::\n:::\n\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Site 1\nexp(0.3584266 + 0.2964994)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.925\n```\n\n\n:::\n\n```{.r .cell-code}\nas.numeric(predict(model3,type=\"response\")[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.925\n```\n\n\n:::\n:::\n\n\n:::\n\n<br>\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Site 2\nexp(0.3584266 + -0.7151015 )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7\n```\n\n\n:::\n\n```{.r .cell-code}\nas.numeric(predict(model3,type=\"response\")[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7\n```\n\n\n:::\n:::\n\n\n:::\n\n<br>\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Site 3\nexp(0.3584266 + 0.4186021)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.175\n```\n\n\n:::\n\n```{.r .cell-code}\nas.numeric(predict(model3,type=\"response\")[3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.175\n```\n\n\n:::\n:::\n\n\n:::\n\n## More Control Again\n\n#### <span style=\"color:purple\">Contrasts</span>\n\nNo shared connection among these partial intercepts\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  model4=glm(y~0+site, \n             data=dat, \n             family = poisson(link = 'log')\n            )\n\n# No shared intercept\nhead(model.matrix(~0 + site, data = dat), n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  siteSite 1 siteSite 2 siteSite 3\n1          1          0          0\n2          0          1          0\n3          0          0          1\n4          1          0          0\n5          0          1          0\n6          0          0          1\n```\n\n\n:::\n:::\n\n\n\n## Same Model Different Estimates{.scrollable}\n\n\n#### <span style=\"color:purple\">Coeficients</span>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n       (Intercept) siteSite 2 siteSite 3\nModel1   0.6549260 -1.0116009  0.1221027\nModel2  -0.3566749  1.0116009  1.1337036\nModel3   0.3584266  0.2964994 -0.7151015\nModel4   0.6549260 -0.3566749  0.7770287\n```\n\n\n:::\n:::\n\n\n#### <span style=\"color:purple\">Predictions</span>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n           1   2     3     4   5\nModel1 1.925 0.7 2.175 1.925 0.7\nModel2 1.925 0.7 2.175 1.925 0.7\nModel3 1.925 0.7 2.175 1.925 0.7\nModel4 1.925 0.7 2.175 1.925 0.7\n```\n\n\n:::\n:::\n\n\n#### <span style=\"color:purple\">Deviance</span>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n           [,1]\nModel1 305.7557\nModel2 305.7557\nModel3 305.7557\nModel4 305.7557\n```\n\n\n:::\n:::\n\n\n\n## Taking Control\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX = model.matrix(~Independent Variables)\n\n#all variables in dat (additive)\nX = model.matrix(~., data = dat)\n\n#all variables in dat (pair-wise interactions)\nX = model.matrix(~.^2, data = dat)\n\n#all variables in dat (three way- interactions)\nX = model.matrix(~.^3, data = dat) \n\nmodel = glm(y~ 0 + X, ...)\n```\n:::\n\n\n## Poisson Regression (offset)\n\nWhat if our counts of pika are at plots with different sizes?\n\n::: {.fragment}\nPlot size ($\\textbf{A}$) needs to be controlled for. But, we don't want to estimate an effect as it's part of the design. Rather, we want to model the rate - counts per unit area.\n:::\n\n\n::: {.fragment}\n$$\n\\begin{align*}\n\\textbf{y} \\sim & \\text{Poisson}(\\frac{\\boldsymbol{\\lambda}}{\\textbf{A}})\\\\\n\\text{log}(\\frac{\\boldsymbol{\\lambda}}{\\textbf{A}}) =& \\textbf{X}\\boldsymbol{\\beta}\n\\end{align*}\n$$\n\n:::\n\n## Offset\n\n\n::: {.cell}\n\n:::\n\n\n<span style=\"color:purple\">Equivalent</span>\n\n$$\n\\begin{align*}\n\\text{log}(\\frac{\\boldsymbol{\\lambda}}{\\textbf{A}}) =& \\beta_0 + \\beta_1 \\textbf{x}_{1}\\\\\n\\text{log}(\\boldsymbol{\\lambda}) =& \\beta_0 + \\beta_1 \\textbf{x}_{1} + 1\\times \\textbf{A}\n\\end{align*}\n$$\n\n## Offset Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel.rate1 = glm(y~site+offset(log(area)),\n            data=dat, \n            family = poisson(link = 'log')\n            )\n\nmodel.rate2 = glm(y~site,\n            offset = log(area),\n            data=dat, \n            family = poisson(link = 'log')\n            )\n\ncoef(model.rate1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)  siteSite 2  siteSite 3 \n -0.8036891  -0.4692766  -0.0582790 \n```\n\n\n:::\n\n```{.r .cell-code}\ncoef(model.rate2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(Intercept)  siteSite 2  siteSite 3 \n -0.8036891  -0.4692766  -0.0582790 \n```\n\n\n:::\n:::\n\n\n## \n\n\n```{=html}\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<center><span style=\"color:#C70039; font-size: 65px;\";><b>Variable Combinations</b></span></center>\n\n```\n\n\n## Variable Combinations\n\nAdditive & Interaction combinations of categorical and continuous variables\n\n- site (categorical)\n- herb.cover (continuous)\n- dist.trail (continuous)\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  y   site  herb.cover  dist.trail site.re area\n1 0 Site 1 -0.22630093  0.06679655  Site 1    2\n2 1 Site 2  0.02221148 -0.24641488  Site 2    5\n3 0 Site 3 -1.01517375 -0.73612867  Site 3    2\n4 1 Site 1  1.18038309  0.07586011  Site 1    3\n5 0 Site 2 -2.04470642 -0.81595409  Site 2    2\n6 2 Site 3  2.44433686  0.17929858  Site 3    2\n```\n\n\n:::\n:::\n\n\n\n\n## Additive {.scrollable}\n\n### Continuous and Categorical\n\n#### <span style=\"color:purple\">Linear Combination on log-scale</span>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 = glm(y~site+herb.cover,data=dat,family = poisson(link = 'log'))\nmarginaleffects::plot_predictions(m1, condition=c(\"herb.cover\",\"site\"),type=\"link\")\n```\n\n::: {.cell-output-display}\n![](glm2_files/figure-revealjs/unnamed-chunk-29-1.png){width=960}\n:::\n:::\n\n\n#### <span style=\"color:purple\">Linear Combination on response-scale</span>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarginaleffects::plot_predictions(m1, \n                                  condition=c(\"herb.cover\",\"site\"),\n                                  type=\"response\")\n```\n\n::: {.cell-output-display}\n![](glm2_files/figure-revealjs/unnamed-chunk-30-1.png){width=960}\n:::\n:::\n\n\n## Additive {.scrollable}\n\n### Continuous and Continuous</span>\n\n#### <span style=\"color:purple\">Linear Combination on log-scale</span>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm2 = glm(y~dist.trail+herb.cover,data=dat,family = poisson(link = 'log'))\nmarginaleffects::plot_predictions(m2, \n                                  condition=c(\"dist.trail\",\"herb.cover\"),\n                                  type=\"link\")\n```\n\n::: {.cell-output-display}\n![](glm2_files/figure-revealjs/unnamed-chunk-31-1.png){width=960}\n:::\n:::\n\n\n#### <span style=\"color:purple\">Linear Combination on response-scale</span>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarginaleffects::plot_predictions(m2, \n                                  condition=c(\"dist.trail\",\"herb.cover\"),\n                                  type=\"response\")\n```\n\n::: {.cell-output-display}\n![](glm2_files/figure-revealjs/unnamed-chunk-32-1.png){width=480}\n:::\n:::\n\n\n## Interaction {.scrollable}\n\n#### Continuous and Categorical\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm3 = glm(y~site*herb.cover,data=dat,family = poisson(link = 'log'))\nm3 = glm(y~site+herb.cover+site:herb.cover,data=dat,family = poisson(link = 'log'))\nmarginaleffects::plot_predictions(m3,condition=c(\"herb.cover\",\"site\"))\n```\n\n::: {.cell-output-display}\n![](glm2_files/figure-revealjs/unnamed-chunk-33-1.png){width=960}\n:::\n:::\n\n\n## Interaction {.scrollable}\n\n#### Continuous and Continuous\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm4 = glm(y~herb.cover*dist.trail,data=dat, family = poisson(link = 'log'))\nm4 = glm(y~herb.cover+dist.trail+herb.cover:dist.trail,data=dat,family = poisson(link = 'log'))\nmarginaleffects::plot_predictions(m4, condition=c(\"herb.cover\",\"dist.trail\"))\n```\n\n::: {.cell-output-display}\n![](glm2_files/figure-revealjs/unnamed-chunk-34-1.png){width=960}\n:::\n:::\n\n\n## Polynomial {.scrollable}\n\n#### Quadratic\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm5 = glm(y~poly(dist.trail,2),data=dat,family = poisson(link = 'log'))\nm5 = glm(y~dist.trail+I(dist.trail^2),data=dat,family = poisson(link = 'log'))\nmarginaleffects::plot_predictions(m5,condition=c(\"dist.trail\"),type=\"link\")\n```\n\n::: {.cell-output-display}\n![](glm2_files/figure-revealjs/unnamed-chunk-35-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nm5 = glm(y~poly(dist.trail,2),data=dat,family = poisson(link = 'log'))\nm5 = glm(y~dist.trail+I(dist.trail^2),data=dat,family = poisson(link = 'log'))\nmarginaleffects::plot_predictions(m5,condition=c(\"dist.trail\"),type=\"response\")\n```\n\n::: {.cell-output-display}\n![](glm2_files/figure-revealjs/unnamed-chunk-36-1.png){width=960}\n:::\n:::\n\n\n\n## Recap\n\n. . .\n\n-   Poisson Regression\n-   Numerical Optimization\n-   Categorical variables >2 levels\n-   Effect Coding\n-   Variable Combinations\n\n## \n\n\n```{=html}\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<center><span style=\"color:#C70039; font-size: 65px;\";><b>Lab</b></span></center>\n\n```",
    "supporting": [
      "glm2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}