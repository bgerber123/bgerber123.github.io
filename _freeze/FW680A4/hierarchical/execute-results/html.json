{
  "hash": "a48bd3a6fc97b3ff345460dde4dc2f4d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: <span style=\"color:white\">Hierarchical Models</span>\ntitle-slide-attributes:\n    data-background-image: /img/background3.png\nformat:\n  revealjs:\n    chalkboard: true\n    multiplex: true\n---\n\n\n\n## Objectives\n\n<!-- knitr::purl(\"./FW680A4/hierarchical.qmd\", output=\"./classfiles/glmmlab/hierarchical.R\") -->\n\n-   where they are used\n-   examples\n-   case study\n\n## Hobbs and Hooten 2015 (pg. 109)\n\n::: {.incremental}\n\n- Representing variation among individuals arising, for example, from genetics, location, or experience.\n\n- Studying phenomena operating at more than one spatial scale or level of ecological organization.\n\n- Modeling a process as well as uncertainty that results from imperfect observations of the process.\n\n- Understanding changes in states of ecological systems that cannot be observed directly. These states arise from “hidden” processes.\n\n:::\n\n## General Types\n\n- Random Effect / Multi-level Model\n\n- latent/unobserved state or process\n\n\n\n## Example 1\n\n- student grades within classroom, within school\n\n![](/img/school.png)\n\n\n## Example 2\n\n- forest cover effect on occurrence of bobcats at different protected areas\n\n![](/img/bobcat.png)\n\n## Random Effect / Multi-level Model\n\n- repeated *measurements* of individual within population\n\n- repeated *measurements* at a small spatial scale that is part of a larger one\n\n\n## Hierarchical Structure to Data\n\n![](/img/HM1.png)\n\n## Hierarchical Structure to Data\n\n![](/img/HM2.png)\n\n## Hierarchical Structure to Data\n\n![](/img/HM.png)\n\n## Hierarchical Structure to Data\n\n![](/img/HM-general.png)\n\n## Latent State\n\n![](/img/occupancy0.png)\n\n\n## Latent State\n\n![](/img/occupancy1.png)\n\n##\n\n```{=html}\n\n<br>\n<br>\n<br>\n<br>\n<br>\n<center><span style=\"color:#C70039; font-size: 65px;\";><b>Case Study</b></span></center>\n```\n\n\n\n## Data and Problem\n\nWe sample Amur Leopards in five different vegetation types of Land of the Leopard National Park. \n\n![](/img/Amur Leopard.png){fig-align=\"center\"}\n\nInterested in detection rate by vegetation type and overall. \n\n## Data and Problem\n\nWe sample Amur Leopards in five different vegetation types of Land of the Leopard National Park. \n\n![](/img/Amur Leopard.png){fig-align=\"center\"}\n\n**Detection Rate = Independent Counts / Effort**\n\n## Data\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n   y    x effort\n1 10 Veg1      5\n2  8 Veg1      5\n3  8 Veg1      5\n4 11 Veg1      5\n5 10 Veg1      5\n6 10 Veg1      5\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hierarchical_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## Model 1 (No Difference) {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glmmTMB)\nlibrary(broom.mixed)\n\nmodel1 = glmmTMB(y~1, family=poisson(link=\"log\"),data=dat)\n```\n:::\n\n\n<br>\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: poisson  ( log )\nFormula:          y ~ 1\nData: dat\n\n     AIC      BIC   logLik deviance df.resid \n  6138.7   6142.2  -3068.3   6136.7      249 \n\n\nConditional model:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  3.14605    0.01312   239.8   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n:::\n\n## Model 1 (No Difference) {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarginaleffects::predictions(model1,type = \"response\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Estimate Std. Error    z Pr(>|z|)   S 2.5 % 97.5 %\n     23.2      0.305 76.2   <0.001 Inf  22.6   23.8\n     23.2      0.305 76.2   <0.001 Inf  22.6   23.8\n     23.2      0.305 76.2   <0.001 Inf  22.6   23.8\n     23.2      0.305 76.2   <0.001 Inf  22.6   23.8\n     23.2      0.305 76.2   <0.001 Inf  22.6   23.8\n--- 240 rows omitted. See ?avg_predictions and ?print.marginaleffects --- \n     23.2      0.305 76.2   <0.001 Inf  22.6   23.8\n     23.2      0.305 76.2   <0.001 Inf  22.6   23.8\n     23.2      0.305 76.2   <0.001 Inf  22.6   23.8\n     23.2      0.305 76.2   <0.001 Inf  22.6   23.8\n     23.2      0.305 76.2   <0.001 Inf  22.6   23.8\nColumns: rowid, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, y \nType:  response \n```\n\n\n:::\n:::\n\n\n\n## Model 2 (All Different)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel2 = glmmTMB(y~x, family=poisson(link=\"log\"),data=dat,\n                 contrasts = list(x = \"contr.sum\"))\n```\n:::\n\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: poisson  ( log )\nFormula:          y ~ x\nData: dat\n\n     AIC      BIC   logLik deviance df.resid \n  1357.8   1375.4   -673.9   1347.8      245 \n\n\nConditional model:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  2.61640    0.02260  115.75   <2e-16 ***\nx1          -0.41033    0.04281   -9.59   <2e-16 ***\nx2          -1.63807    0.07087  -23.11   <2e-16 ***\nx3          -0.39503    0.04257   -9.28   <2e-16 ***\nx4           1.44783    0.02678   54.07   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n::: \n\n## Model 2 (All Different)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarginaleffects::predictions(model2, \n                             newdata = data.frame(x=c(\"Veg1\",\"Veg2\",\"Veg3\",\"Veg4\",\"Veg5\")),\n                             re.form=NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Estimate Std. Error    z Pr(>|z|)     S 2.5 % 97.5 %\n     9.08      0.426 21.3   <0.001 332.2  8.24   9.92\n     2.66      0.231 11.5   <0.001  99.8  2.21   3.11\n     9.22      0.429 21.5   <0.001 337.3  8.38  10.06\n    58.22      1.079 54.0   <0.001   Inf 56.11  60.33\n    37.04      0.861 43.0   <0.001   Inf 35.35  38.73\n\nColumns: rowid, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, x, y \nType:  response \n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Model 3 (middle-ground) {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel3 = glmmTMB(y~1+(1|x), family=poisson(link=\"log\"),data=dat)\n```\n:::\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: poisson  ( log )\nFormula:          y ~ 1 + (1 | x)\nData: dat\n\n     AIC      BIC   logLik deviance df.resid \n  1390.4   1397.5   -693.2   1386.4      248 \n\nRandom effects:\n\nConditional model:\n Groups Name        Variance Std.Dev.\n x      (Intercept) 1.217    1.103   \nNumber of obs: 250, groups:  x, 5\n\nConditional model:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)   2.6173     0.4939     5.3 1.16e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n:::\n\n## Model 3 (middle-ground) {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nranef(model3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x\n     (Intercept)\nVeg1  -0.4104470\nVeg2  -1.6289235\nVeg3  -0.3951846\nVeg4   1.4465567\nVeg5   0.9942933\n```\n\n\n:::\n:::\n\n\n<br>\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbroom.mixed::tidy(model3, effects = \"ran_vals\", conf.int = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 9\n  effect   component group level term      estimate std.error conf.low conf.high\n  <chr>    <chr>     <chr> <chr> <chr>        <dbl>     <dbl>    <dbl>     <dbl>\n1 ran_vals cond      x     Veg1  (Interce…   -0.410     0.495  -1.38       0.560\n2 ran_vals cond      x     Veg2  (Interce…   -1.63      0.498  -2.61      -0.652\n3 ran_vals cond      x     Veg3  (Interce…   -0.395     0.495  -1.37       0.575\n4 ran_vals cond      x     Veg4  (Interce…    1.45      0.494   0.478      2.41 \n5 ran_vals cond      x     Veg5  (Interce…    0.994     0.494   0.0257     1.96 \n```\n\n\n:::\n:::\n\n\n:::\n\n<br>\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfint(model3, component = c(\"all\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                          2.5 %   97.5 % Estimate\n(Intercept)           1.6493302 3.585197 2.617264\nStd.Dev.(Intercept)|x 0.5924539 2.054005 1.103133\n```\n\n\n:::\n:::\n\n\n:::\n\n<br>\n\n<!-- ::: {.fragment} -->\n\n<!-- ```{r echo=TRUE, eval=TRUE} -->\n<!-- broom.mixed::tidy(model3, conf.int = TRUE) -->\n<!-- ``` -->\n\n<!-- ::: -->\n\n<br>\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfixef(model3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nConditional model:\n(Intercept)  \n      2.617  \n```\n\n\n:::\n:::\n\n\n:::\n\n<br>\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Predictions - does not include RE uncertainty\npreds = predict(model3,\n                newdata=data.frame(x=c(\"Veg1\",\"Veg2\",\"Veg3\",\"Veg4\",\"Veg5\")),\n                type=\"link\",\n                re.form=NULL,\n                se.fit = TRUE\n                )\n\n\npreds$LCL = exp(preds$fit-1.96*preds$se.fit)\npreds$UCL = exp(preds$fit+1.96*preds$se.fit)\npreds$fit = exp(preds$fit)\n\ndata.frame(preds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        fit     se.fit       LCL       UCL\n1  9.086746 0.04688339  8.288967  9.961307\n2  2.686772 0.08629719  2.268679  3.181914\n3  9.226495 0.04652728  8.422324 10.107449\n4 58.196226 0.01853791 56.119660 60.349630\n5 37.023659 0.02323965 35.375073 38.749074\n```\n\n\n:::\n:::\n\n\n:::\n\n<br>\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#A typical site\npredict(model3,type=\"response\",re.form=NA)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13.69819\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n## Model 3b\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\nmodel3b = glmer(y~1+(1|x), family=poisson(link=\"log\"),data=dat)\n```\n:::\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nequatiomatic::extract_eq(model3b)\n```\n\n::: {.cell-output-display}\n$$\n\\begin{aligned}\n  \\operatorname{y}_{i}  &\\sim \\operatorname{Poisson}(\\lambda_i) \\\\\n    \\log(\\lambda_i) &=\\alpha_{j[i]} \\\\\n    \\alpha_{j}  &\\sim N \\left(\\mu_{\\alpha_{j}}, \\sigma^2_{\\alpha_{j}} \\right)\n    \\text{, for x j = 1,} \\dots \\text{,J}\n\\end{aligned}\n$$\n\n:::\n:::\n\n\n:::\n\n## Alt Model Notation\n\n\n\\begin{align*}\ny_{i} \\sim& \\text{Poisson}(\\lambda_{i})\\\\\n\\text{log}(\\lambda_{i}) =& \\mu + \\alpha_{j[i]}\\\\\n \\alpha_{j} \\sim& \\text{Normal}(0, \\sigma^2_{\\alpha})\n\n\\end{align*}\n\n\n## Random Intercept + Slope\n\nLeopard detection varies by cover and veg, where the effect of cover comes from a shared distribution\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  y         cov  veg\n1 3  0.40161608 Veg1\n2 0 -0.12360373 Veg1\n3 3  0.62883136 Veg1\n4 0  0.07607150 Veg1\n5 2  0.04150764 Veg1\n6 0 -0.39289231 Veg1\n```\n\n\n:::\n:::\n\n\n\n## Random Intercept + Slope\n\n\n::: {.cell}\n\n```{.r .cell-code}\nre.model = glmer(y~cov+(cov|veg), family=poisson(link=\"log\"),data=dat2)\n```\n:::\n\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(re.model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: poisson  ( log )\nFormula: y ~ cov + (cov | veg)\n   Data: dat2\n\n     AIC      BIC   logLik deviance df.resid \n 14274.7  14295.8  -7132.4  14264.7      495 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n -4.798  -2.443  -1.630  -0.946 145.188 \n\nRandom effects:\n Groups Name        Variance Std.Dev. Corr\n veg    (Intercept) 0.4896   0.6997       \n        cov         0.1392   0.3732   0.14\nNumber of obs: 500, groups:  veg, 5\n\nFixed effects:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)   1.6210     0.3137   5.166 2.39e-07 ***\ncov           0.1121     0.1683   0.666    0.505    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n    (Intr)\ncov 0.140 \n```\n\n\n:::\n:::\n\n\n:::\n\n## Random Intercept + Slope\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarginaleffects::plot_predictions(re.model,\n                                  condition=c(\"cov\",\"veg\"),\n                                  type=\"link\",\n                                  re.form=NULL\n                                  )\n```\n\n::: {.cell-output-display}\n![](hierarchical_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n## Random Intercept + Slope\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarginaleffects::plot_predictions(re.model,\n                                  condition=c(\"cov\",\"veg\"),\n                                  type=\"link\",\n                                  re.form=NA\n                                  )\n```\n\n::: {.cell-output-display}\n![](hierarchical_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n## Random Intercept + Slope\n\n\n::: {.cell}\n\n```{.r .cell-code}\nequatiomatic::extract_eq(re.model)\n```\n\n::: {.cell-output-display}\n$$\n\\begin{aligned}\n  \\operatorname{y}_{i}  &\\sim \\operatorname{Poisson}(\\lambda_i) \\\\\n    \\log(\\lambda_i) &=\\alpha_{j[i]} + \\beta_{1j[i]}(\\operatorname{cov}) \\\\    \n\\left(\n  \\begin{array}{c} \n    \\begin{aligned}\n      &\\alpha_{j} \\\\\n      &\\beta_{1j}\n    \\end{aligned}\n  \\end{array}\n\\right)\n  &\\sim N \\left(\n\\left(\n  \\begin{array}{c} \n    \\begin{aligned}\n      &\\mu_{\\alpha_{j}} \\\\\n      &\\mu_{\\beta_{1j}}\n    \\end{aligned}\n  \\end{array}\n\\right)\n, \n\\left(\n  \\begin{array}{cc}\n     \\sigma^2_{\\alpha_{j}} & \\rho_{\\alpha_{j}\\beta_{1j}} \\\\ \n     \\rho_{\\beta_{1j}\\alpha_{j}} & \\sigma^2_{\\beta_{1j}}\n  \\end{array}\n\\right)\n \\right)\n    \\text{, for veg j = 1,} \\dots \\text{,J}\n\\end{aligned}\n$$\n\n:::\n:::\n\n\n\n\n## FAQ\n\n[GLMM FAQ](https://bbolker.github.io/mixedmodels-misc/glmmFAQ.html)\n\n- model specifications\n\n- predictions with uncertainty\n\n- Testing RE's\n\n## Considerations\n\n- Shrinkage/Regularization\n\n- When to use a random effect?\n\n## Lab\n\n\n\n",
    "supporting": [
      "hierarchical_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}