{
  "hash": "652ced286ed7c35ee59ce6a1efe8a88e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hierarchical Bayesian Occupancy Lab\"\nauthor: \"Brian Gerber\"\ndate: \"2024-10-30\"\noutput: html_document\n---\n\n\n\n\n\n\n## Setup Data and Packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\n  library(rjags)\n  library(brms)\n  library(bayesplot)\n  library(ubms)  \n  library(unmarked)  \n\n#Read data\n  bunny=read.csv(\"detection_nondetection_bunny.csv\")\n  bunny.data = cbind(bunny$Observed1,  bunny$Observed2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Look at the data\n  head(bunny)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ShrubHabitat  Veg Observed1 Observed2\n1            1 0.45         1         1\n2            1 0.08         0         0\n3            1 0.84         0         0\n4            1 0.01         0         0\n5            0 0.96         0         0\n6            0 0.55         0         0\n```\n\n\n:::\n:::\n\n\n\n\n### Fit Occupancy Models\n\n#### JAGS\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Date setup with covaraite\n  data=list(\n    y=bunny.data,\n    n.sites=nrow(bunny.data),\n    n.visits=ncol(bunny.data),\n    veg = bunny$Veg\n  )\n\n\n  params=c(\"a0\",\"a1\",\"b0\",\"b1\")\n\n  inits <- function(){list(z=apply(bunny.data, 1, max), a0=rnorm(1), b0=rnorm(1),a1=rnorm(1), b1=rnorm(1))}\n\n# Settings for MCMC chains\n  nchains<-3\n  niter<-5000\n  nburn<-1000\n  nthin<-1\n\n  jm=jags.model(file=\"occ.model.cov.JAGS.R\", data=data, inits=inits, n.chains=nchains, n.adapt=2000)\n\n# Run the burn-in portion of the model\n  update(jm, n.iter=nburn)\n\n# Sample from the posterior\n  M3 = coda.samples(jm, variable.names=params, n.iter=niter, thin=nthin)\n  #save(M3,file=\"M3\")\n```\n:::\n\n\n\n\n#### UBMS/stan\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUMF <- unmarkedFrameOccu(y=bunny.data,siteCovs=data.frame(veg = bunny$Veg))\n\n# use R package to fit the same model in stan\n  model5.stan = stan_occu(~veg ~veg, data=UMF, chains=3, iter=5000)\n  #save(model5.stan, file=\"model5.stan\")\n```\n:::\n\n\n\n\n\n## Challenge\n\n### Step 1\n\nIgnore detection probability  and fit a Bayesian logistic regression model. Use brm or JAGS to fit the model. Compare this slope to your findings from your Bayesian occupancy model slopes - either model5.stan or M3. How are the results different? Think about the issue of ignoring detection probability and what this might mean for your interpretation of an ecological effect?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbunny.ignore.det = apply(bunny.data,1,sum)\nbunny.ignore.det[which(bunny.ignore.det==2)]=1\n\n# Now, we have site level observation without replication. A 1 indicates a detection in either column 1 or column 2 or both.\n# A zero is no detection for other observation.\n\n# Fit the Bayesian logistic regression model and estimate a slope for the effect of veg (bunny$veg)\nbunny.ignore.det\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 1 0 0 0 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 1 1 0 1 0 0 1 0 0 1 0 0 0 1 1 0 1 0\n [38] 0 0 1 0 1 1 1 1 1 1 0 1 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 1 1 0 1 1 0 0 1 0 0\n [75] 0 1 1 0 1 1 1 0 0 1 0 0 0 1 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 0 0\n[112] 0 0 0 1 0 0 0 1 1 0 0 0 1 0 0 1 0 0 1 1 0 1 1 1 0 0 0 0 1 1 1 0 1 1 0 0 1\n[149] 0 1 1 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 1 0 0\n[186] 0 0 0 1 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 1 1 0 1 1 0 1 1 0 0 1 0 0 0 1 1 0 0\n[223] 1 1 1 0 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 1 0 0 0 0 0 0 1 0 1\n[260] 1 0 0 1 1 0 0 0 0 1 1 0 0 0 1 1 0 1 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 1 0 1\n[297] 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 1 1 0 1 0 0 1 0 1 0 0 0 0 1 0\n[334] 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 1 1 0 0 0 1 0 0 1 0 1 1 1 1 0 1 0 1\n[371] 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 0 1 1 0\n```\n\n\n:::\n:::\n\n\n\n\n#### Logistic Regression with brm\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Setup a dataframe with the new occurrence data and veg covariate\ndat = data.frame(y=bunny.ignore.det, veg=bunny$Veg)\n\n# Use brms to fit a logistic regression model\nbrm.fit = brm(formula =  y~ veg,  \n              data = dat, \n              family = bernoulli(link = \"logit\"),\n              warmup = 2000, \n              iter = 5000, \n              chains = 3, \n              sample_prior = FALSE\n)\n#save(brm.fit,file=\"brm.fit\")\n```\n:::\n\n\n\n\nExamine posteriors and traceplots\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(brm.fit)\n```\n\n::: {.cell-output-display}\n![](hboccu.BDG_files/figure-html/brm plot-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#Extract posterior samples\nb_veg = as_draws(brm.fit,variable=\"b_veg\")\n\n#plot posterior samples manually\n#plot(density(b_veg[[1]]$b_veg),lwd=3)\n```\n:::\n\n\n\n\n\n#### Logistic Regression with JAGS\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Need to include are covaraite\ndat = data.frame(y=bunny.ignore.det, veg=bunny$Veg)\n\ndata=list(\n  y=dat$y,\n  n.sites=length(dat$y),\n  veg = dat$veg\n)\n\n\nparams=c(\"b0\",\"b1\")\n\ninits <- function(){list(b0=rnorm(1), b1=rnorm(1))}\n\njm=jags.model(file=\"logistic.model.cov.JAGS.R\", data=data, inits=inits, n.chains=nchains, n.adapt=2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCompiling model graph\n   Resolving undeclared variables\n   Allocating nodes\nGraph information:\n   Observed stochastic nodes: 400\n   Unobserved stochastic nodes: 2\n   Total graph size: 1108\n\nInitializing model\n```\n\n\n:::\n\n```{.r .cell-code}\n# Run the burn-in portion of the model\nupdate(jm, n.iter=nburn)\n\n# Sample from the posterior\njags.fit.logistic = coda.samples(jm, variable.names=params, n.iter=niter, thin=nthin)\n\nplot(jags.fit.logistic)\n```\n\n::: {.cell-output-display}\n![](hboccu.BDG_files/figure-html/JAGS.fit-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Take-Home\n\nTo really see the issue, we should plot the posterior distributions of the slope of vegetation when accounting for detection and ignoring detection. In the below plots, if we ignore detection probability, we see the effect of veg is negative (top plot). However, when we separate detection and occupancy (model M3 and model5.stan), the effect of veg on occupancy is positive. Our conclusion about the the effect of veg is opposite. The differences of the posteriors within each plot are simply due to not running the MCMC iterations long enogugh and different priors. \n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](hboccu.BDG_files/figure-html/plot comparison-1.png){width=960}\n:::\n:::\n\n\n\n\n\n### Step 2\n\nUse model5.stan or M3 to make a prediction plot of occupancy (y-axis) and veg (x-axis).\n\n### Using ubms/stan\n\n\nThe `predict` function works with ubms to get predictions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#We can use the predict function to get predictions of the 'state' or occurence probabiltiy\n  preds=predict(model5.stan,submodel=\"state\")\n  \n#Create dataframe and reorder for plotting  \n  preds=data.frame(preds,veg=bunny$Veg)\n  preds=preds[order(preds$veg),]\n\n# plot predictions and 95% credible intervals    \n  plot(preds$veg,preds$Predicted,lwd=4,col=2,type=\"l\",ylim=c(0,1))\n  lines(preds$veg,preds$X2.5.,lwd=4,col=3)\n  lines(preds$veg,preds$X97.5.,lwd=4,col=3)\n```\n\n::: {.cell-output-display}\n![](hboccu.BDG_files/figure-html/ubms.pred-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Using JAGS model\n\nUsing Jags, we need to backtransform parameters ourselves. There is no function to do this for us.\n  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  beta0=M3[[1]][,3]\n  beta1=M3[[1]][,4]\n\n# loop over covariate value and get a posterior distribution for each value\n# of veg\npreds.veg= matrix(0, ncol=length(beta1),nrow=length(bunny$Veg))  \n  for( i in 1:length(bunny$Veg)){\n   preds.veg[i,] = beta0+beta1*bunny$Veg[i]  \n  }\n\ndim(preds.veg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  400 5000\n```\n\n\n:::\n\n```{.r .cell-code}\n#Get quantiles from prediction posterior distributions\npreds.quantile = apply(preds.veg,1,quantile,probs=c(0.025,0.5,0.975))\npreds.quantile = plogis(preds.quantile)\n\npreds.quantile = data.frame(t(preds.quantile),veg=bunny$Veg)\nhead(preds.quantile)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      X2.5.      X50.    X97.5.  veg\n1 0.5387980 0.6454013 0.7674074 0.45\n2 0.4382571 0.5345797 0.6277029 0.08\n3 0.5258638 0.7495458 0.9138909 0.84\n4 0.3937687 0.5128651 0.6227004 0.01\n5 0.5174074 0.7760901 0.9388150 0.96\n6 0.5379086 0.6745990 0.8152814 0.55\n```\n\n\n:::\n\n```{.r .cell-code}\npreds.quantile=preds.quantile[order(preds.quantile$veg),]\nplot(preds.quantile$veg,preds.quantile$X50.,lwd=4,col=2,type=\"l\",ylim=c(0,1))\nlines(preds.quantile$veg,preds.quantile$X2.5.,lwd=4,col=3)\nlines(preds.quantile$veg,preds.quantile$X97.5.,lwd=4,col=3)\n```\n\n::: {.cell-output-display}\n![](hboccu.BDG_files/figure-html/jags.preds-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}