{
  "hash": "3476c63ad64a8a42dea0e096a200a779",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Fitting Step-Selection Functions with `amt`\"\nauthor: \"Johannes Signer\"\ndate: \"2024-10-17\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteKeyword{ssf}\n  %\\VignetteIndexEntry{Fitting a Step-Selection Function}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\n\n\n\n\n\n\n## About\n\nThis vignette briefly introduces how one can fit a Step-Selection Function (SSF) with the `amt` package. We will be using the example data of one red deer from northern Germany and one covariate: a forest cover map. For a more through discussion see also Fieberg et al. 2020^[https://www.biorxiv.org/content/10.1101/2020.11.12.379834v4] and supplement B.\n\n## Getting the data ready\n\nFirst we load the required libraries and the relocation data (called `deer`)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\nlibrary(amt)\ndata(\"deer\")\ndeer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 826 × 4\n         x_       y_ t_                  burst_\n *    <dbl>    <dbl> <dttm>               <dbl>\n 1 4314068. 3445807. 2008-03-30 00:01:47      1\n 2 4314053. 3445768. 2008-03-30 06:00:54      1\n 3 4314105. 3445859. 2008-03-30 12:01:47      1\n 4 4314044. 3445785. 2008-03-30 18:01:24      1\n 5 4313015. 3445858. 2008-03-31 00:01:23      1\n 6 4312860. 3445857. 2008-03-31 06:01:45      1\n 7 4312854. 3445856. 2008-03-31 12:01:11      1\n 8 4312858. 3445858. 2008-03-31 18:01:55      1\n 9 4312745. 3445862. 2008-04-01 00:01:24      1\n10 4312651. 3446024. 2008-04-01 06:00:54      1\n# ℹ 816 more rows\n```\n\n\n:::\n:::\n\n\n\n\nIn order to continue, we need a regular sampling rate. To check the current sampling rate, we use `summarize_sampling_rate`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize_sampling_rate(deer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 9\n    min    q1 median  mean    q3   max    sd     n unit \n  <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <int> <chr>\n1  5.96  6.00   6.01  11.5  6.02 3924.  137.   825 hour \n```\n\n\n:::\n:::\n\n\n\n\nThe median sampling rate is 6h, which is what we aimed for.\n\n\nNext, we have to get the environmental covariates. A forest layer is included in the package. Note, that this a regular `SpatRast`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsh_forest <- get_sh_forest()\nsh_forest\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 720, 751, 1  (nrow, ncol, nlyr)\nresolution  : 25, 25  (x, y)\nextent      : 4304725, 4323500, 3437725, 3455725  (xmin, xmax, ymin, ymax)\ncoord. ref. : +proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nsource(s)   : memory\nname        : forest \nmin value   :      0 \nmax value   :      1 \n```\n\n\n:::\n:::\n\n\n\n\n## Prepare Data for SSF\n\n### Steps\n\nBefore fitting a SSF we have to do some data preparation. First, we change from a point representation to a step representation, using the function `steps_by_burst`, which in contrast to the `steps` function accounts for bursts.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nssf1 <- deer |> steps_by_burst()\n```\n:::\n\n\n\n\n### Control/random steps\n\nThe generic function `random_steps` provides a methods for a `track_xy*`, where each observed step is paired with `n_control` control steps (i.e., steps that share the same starting location but have different turn angles and step lengths). The distributions for drawing step lengths and turning angles are usually obtained by fitting known parametric distribution to the observed step length and turn angles. \n\nThe function `random_steps` has seven arguments. For most use cases the defaults are just fine, but there might situation where the user wants to adjust some of the arguments. The arguments are:  \n\n1. `x`: This is the `track_xy*` for which the random steps are created. That is, for each step in `x` `n_control` random steps are created. \n2. `n_control`: The number of random steps that should be created for each observed step.\n3. `sl_distr`: This is the distribution of the step lengths. By default a gamma distribution is fit to the observed step lengths of the `x`. But any `amt_distr` is suitable here. ^[See also `?fit_distr`.]\n4. `ta_distr`: This is the turn angle distribution, with the default being a von Mises distribution.\n5. `rand_sl`: These are the random step lengths, by default 1e5 random numbers from the distribution fitted in 3^[Note, this possible because of the [Glivenko-Cantelli theorem](https://en.wikipedia.org/wiki/Glivenko%E2%80%93Cantelli_theorem) and works as long as the sample from the original distribution (the sample you provide here) is large enough.].\n6. `rand_ta`: These are the random turn angles, by default 1e4 random numbers from the distribution fitted in 4.\n7. `include_observed`: This argument is by default `TRUE` and indicates if the observed steps should be included or not.\n\n\n#### The default situation\n\nIn most situations the following code snippet should work^[And how it was implemented in `amt` up to version 0.0.6. This **should** be backward compatible and not break existing code.]. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nssf1 <- ssf1 |> random_steps(n_control = 15)\n```\n:::\n\n\n\n\n#### A exponential distribution for step lengths\n\n*todo*\n\n\n### Extract covariates\n\nAs a last step, we have to extract the covariates at the end point of each step. We can do this with `extract_covariates`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nssf1 <- ssf1 |> extract_covariates(sh_forest) \n```\n:::\n\n\n\n\n\nSince the forest layers is coded as `1 = forest` and `2 != forest`, we create a factor with appropriate levels. We also calculate the log of the step length and the cosine of the turn angle, which we may use later for a integrated step selection function.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nssf1 <- ssf1 |> \n  mutate(forest = factor(forest, levels = 1:0, labels = c(\"forest\", \"non-forest\")), \n         cos_ta = cos(ta_), \n        log_sl = log(sl_)) \n```\n:::\n\n\n\n\n## Fitting SSF \n\nNow all pieces are there to fit a SSF. We will use `fit_clogit`, which is a wrapper around `survival::clogit`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm0 <- ssf1 |> fit_clogit(case_ ~ forest + strata(step_id_))\nm1 <- ssf1 |> fit_clogit(case_ ~ forest + forest:cos_ta + forest:log_sl + log_sl * cos_ta + strata(step_id_))\nm2 <- ssf1 |> fit_clogit(case_ ~ forest + forest:cos_ta + forest:log_sl + log_sl + cos_ta + strata(step_id_))\nsummary(m0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = Surv(rep(1, 12096L), case_) ~ forest + strata(step_id_), \n    data = data, method = \"exact\")\n\n  n= 12096, number of events= 756 \n\n                    coef exp(coef) se(coef)      z Pr(>|z|)    \nforestnon-forest -0.5145    0.5978   0.1088 -4.727 2.28e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n                 exp(coef) exp(-coef) lower .95 upper .95\nforestnon-forest    0.5978      1.673     0.483      0.74\n\nConcordance= 0.529  (se = 0.007 )\nLikelihood ratio test= 21.65  on 1 df,   p=3e-06\nWald test            = 22.34  on 1 df,   p=2e-06\nScore (logrank) test = 22.44  on 1 df,   p=2e-06\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = Surv(rep(1, 12096L), case_) ~ forest + forest:cos_ta + \n    forest:log_sl + log_sl * cos_ta + strata(step_id_), data = data, \n    method = \"exact\")\n\n  n= 12096, number of events= 756 \n\n                            coef exp(coef) se(coef)      z Pr(>|z|)    \nforestnon-forest         0.83934   2.31483  0.32799  2.559 0.010497 *  \nlog_sl                   0.17416   1.19025  0.04958  3.513 0.000443 ***\ncos_ta                  -0.20329   0.81604  0.20531 -0.990 0.322092    \nforestnon-forest:cos_ta -0.31159   0.73228  0.11769 -2.648 0.008106 ** \nforestnon-forest:log_sl -0.25554   0.77450  0.05786 -4.416    1e-05 ***\nlog_sl:cos_ta            0.01656   1.01669  0.03450  0.480 0.631313    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n                        exp(coef) exp(-coef) lower .95 upper .95\nforestnon-forest           2.3148     0.4320    1.2171    4.4026\nlog_sl                     1.1902     0.8402    1.0800    1.3117\ncos_ta                     0.8160     1.2254    0.5457    1.2203\nforestnon-forest:cos_ta    0.7323     1.3656    0.5814    0.9223\nforestnon-forest:log_sl    0.7745     1.2912    0.6915    0.8675\nlog_sl:cos_ta              1.0167     0.9836    0.9502    1.0878\n\nConcordance= 0.609  (se = 0.013 )\nLikelihood ratio test= 90.25  on 6 df,   p=<2e-16\nWald test            = 88.38  on 6 df,   p=<2e-16\nScore (logrank) test = 90.65  on 6 df,   p=<2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(m2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = Surv(rep(1, 12096L), case_) ~ forest + forest:cos_ta + \n    forest:log_sl + log_sl + cos_ta + strata(step_id_), data = data, \n    method = \"exact\")\n\n  n= 12096, number of events= 756 \n\n                            coef exp(coef) se(coef)      z Pr(>|z|)    \nforestnon-forest         0.84859   2.33635  0.32724  2.593 0.009510 ** \nlog_sl                   0.17369   1.18969  0.04956  3.505 0.000457 ***\ncos_ta                  -0.11644   0.89008  0.09693 -1.201 0.229614    \nforestnon-forest:cos_ta -0.31497   0.72981  0.11750 -2.681 0.007348 ** \nforestnon-forest:log_sl -0.25707   0.77331  0.05776 -4.451 8.56e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n                        exp(coef) exp(-coef) lower .95 upper .95\nforestnon-forest           2.3363     0.4280    1.2302    4.4370\nlog_sl                     1.1897     0.8406    1.0796    1.3111\ncos_ta                     0.8901     1.1235    0.7361    1.0763\nforestnon-forest:cos_ta    0.7298     1.3702    0.5797    0.9188\nforestnon-forest:log_sl    0.7733     1.2931    0.6905    0.8660\n\nConcordance= 0.609  (se = 0.013 )\nLikelihood ratio test= 90.02  on 5 df,   p=<2e-16\nWald test            = 87.6  on 5 df,   p=<2e-16\nScore (logrank) test = 89.63  on 5 df,   p=<2e-16\n```\n\n\n:::\n:::\n\n\n\n\n### Interpretation of coefficients\n\nSee the discussion in Fieberg et al 2021.\n\n## A note on piping\n\nAll steps described above, could easily be wrapped into one piped workflow:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- deer |> \n  steps_by_burst() |> random_steps(n = 15) |> \n  extract_covariates(sh_forest) |> \n  mutate(forest = factor(forest, levels = 1:0, labels = c(\"forest\", \"non-forest\")), \n         cos_ta = cos(ta_), \n         log_sl = log(sl_)) |> \n  fit_clogit(case_ ~ forest + forest:cos_ta + forest:sl_ + sl_ * cos_ta + strata(step_id_))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = Surv(rep(1, 12096L), case_) ~ forest + forest:cos_ta + \n    forest:sl_ + sl_ * cos_ta + strata(step_id_), data = data, \n    method = \"exact\")\n\n  n= 12096, number of events= 756 \n\n                              coef  exp(coef)   se(coef)      z Pr(>|z|)    \nforestnon-forest        -0.1036793  0.9015144  0.1407961 -0.736  0.46150    \nsl_                      0.0006758  1.0006760  0.0001538  4.394 1.11e-05 ***\ncos_ta                  -0.3355283  0.7149603  0.1098064 -3.056  0.00225 ** \nforestnon-forest:cos_ta -0.2134928  0.8077580  0.1183237 -1.804  0.07118 .  \nforestnon-forest:sl_    -0.0009751  0.9990253  0.0001986 -4.909 9.14e-07 ***\nsl_:cos_ta               0.0003849  1.0003850  0.0001271  3.027  0.00247 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n                        exp(coef) exp(-coef) lower .95 upper .95\nforestnon-forest           0.9015     1.1092    0.6841    1.1880\nsl_                        1.0007     0.9993    1.0004    1.0010\ncos_ta                     0.7150     1.3987    0.5765    0.8866\nforestnon-forest:cos_ta    0.8078     1.2380    0.6406    1.0186\nforestnon-forest:sl_       0.9990     1.0010    0.9986    0.9994\nsl_:cos_ta                 1.0004     0.9996    1.0001    1.0006\n\nConcordance= 0.603  (se = 0.013 )\nLikelihood ratio test= 105.2  on 6 df,   p=<2e-16\nWald test            = 107.8  on 6 df,   p=<2e-16\nScore (logrank) test = 116.5  on 6 df,   p=<2e-16\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}