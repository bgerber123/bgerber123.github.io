{
  "hash": "84fa496ec5e09811df83a7139122e11d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle:  <span style=\"color:white\">Introduction to R</span>\ntitle-slide-attributes:\n  data-background-image: index_files/background.png\n  background-opacity: \"0.45\"\nrender:\n  - \"*.{qmd,R}\"\nformat: \n  revealjs:\n    theme: simple\n    slide-number: true\n    show-slide-number: all\n    chalkboard: true\n    multiplex: true\n    width: 1200\n    height: 750\n    #width: 1920\n    #height: 1080\n    margin: 0.05\n---\n\n\n## [Download Files]{style=\"color:green;\"}\n\n[Download this presentation as pdf](Introduction.R.lecture1..pdf)\n\n[Download code displayed in presentation](lecturescript.R)\n\n<br>\n\n**To save either file**.... Right-click --> 'Save link as...'. Save file to location. Go to RStudio or Acrobat. File --> Open File... find your file.\n\n<br>\n\n**To copy/paste code directly:**\n\nLeft-Click --> Ctrl A --> Ctrl C. Go to RStudio, left-click on an empty script. Ctrl V.\n\n\n\n\n\n\n## [Introductions]{style=\"color:green;\"}\n\n\n::: {.cell}\n<style type=\"text/css\">\n<!-- .big-code{ -->\n<!--   font-size: 140%   -->\n<!-- } -->\n\n\ncode {\n  font-size: 1.5em;\n  /* or try font-size: xx-large; */\n}\n\n#knitr::purl(\"index.qmd\", output = \"lecturescript.R\", documentation = 00L)\n\n</style>\n:::\n\n\n::: columns\n::: {.column width=\"50%\"}\nInstructors:\n\n-   [Kyle Horton](https://aeroecolab.com/)\n-   [Georgia Titcomb](https://georgiatitcomb.weebly.com/)\n-   [Brian Gerber](https://bgerber123.github.io/)\n\n:::\n\n\n::: {.column width=\"50%\"}\n![](index_files\\logos.png)\n:::\n:::\n\n## [Why learn to code?]{style=\"color:green;\"}\n\n::: fragment\n-   efficiency\n-   transparency\n-   flexibility in application\n-   shareable\n-   marketable skill\n-   needed for publications\n:::\n\n## [Software]{style=\"color:green;\"}\n\n![](logosR.png)\n\n## [What is R?]{style=\"color:green;\"}\n\n[R](https://www.r-project.org/about.html) is a \"suite of software facilities for data manipulation, calculation and graphical display.\"\n\n<br>\n\n. . . \n\nR uses **packages** that are collections of functions, data, and compiled code in a \"well-defined format\".\n\n<br>\n\n. . . \n\n**Packages** are downloaded from The Comprehensive R Archive Network (CRAN), R's central software repository. Also, on GitHub, GitLab, BitBucket or other code sharing platforms.\n\n## [Why use R?]{style=\"color:green;\"}\n\n::: fragment\n-   open-source and free\n-   small total user base / large in ecology and statistics\n-   find help online, e.g., [stack**overflow**](https://stackoverflow.com/)\n-   data management\n-   statistics\n-   plotting / graphics\n:::\n\n## [What is RStudio?]{style=\"color:green;\"}\n\n\n[RStudio](https://posit.co/download/rstudio-desktop/) is an \"Integrated Development Environment (IDE)\". It brings tools/languages together. We use R within RStudio.\n\n\n## [Why use RStudio?]{style=\"color:green;\"}\n\n-   Makes using R easier\n-   [Projects (file mgmt)](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects)\n-   [R Shiny](https://www.rstudio.com/products/shiny/): Interactive online apps\n-   [R Markdown](https://rmarkdown.rstudio.com/): Interactive documents\n-   [Quarto](https://quarto.org/docs/get-started/hello/rstudio.html): interactive articles, websites, blog, ...\n-   [Posit](https://posit.co/) - Certified B corp\n\n## [Online resources to learn R]{style=\"color:green;\"}\n\n-   [Intro to R for Biologists](https://melbournebioinformatics.github.io/r-intro-biologists/intro_r_biologists.html#R_for_Biologists_course)\n\n-   [Introduction to R - tidyverse](https://bookdown.org/ansellbr/WEHI_tidyR_course_book/)\n\n-   [R for Data Science (2e)](https://r4ds.hadley.nz/)\n\n-   [Advanced R](https://adv-r.hadley.nz/index.html)\n\n-   [Introduction to the R Language](https://bookdown.org/mcwimberly/gdswr-book/introduction-to-the-r-language.html#matrices-and-lists)\n\n-   [Introduction to R](https://bookdown.org/palmjulia/r_intro_script/introduction.html)\n\n-   [An Introduction to R for Research](https://bookdown.org/rwnahhas/IntroToR/)\n\n-   [Introduction to Data Exploration ana Analysis with R](https://bookdown.org/mikemahoney218/IDEAR/)\n\n-   [Working with Data in R](https://bookdown.org/ejvanholm/WorkingWithData/)\n\n## [Today]{style=\"color:green;\"}\n\n**Goal**\n\n'Get familiar with fundamentals of R useful for data'\n\n<br>\n\n'To get beyond the initial shock or fear of programming and start using R'\n\n## [Today]{style=\"color:green;\"}\n\n**Learning Objectives**\n\n-   Write and execute code in R via RStudio\n-   R language vocabulary\n-   Find help\n-   Read/write data\n-   Manipulate data efficiently\n-   Plot data or results\n\n## [Today]{style=\"color:green;\"}\n\n**Execution**\n\n-   Presentation / code walk through\n-   Challenges (independent or in teams of 2-3)\n\n## [Today]{style=\"color:green;\"}\n\n**Schedule**\n\n-   [900 - 930]{style=\"color:blue;\"}: Introductions and setup\n-   [930 - 1000]{style=\"color:blue;\"}: RStudio and R (objects and functions)\n-   [1000 - 1130]{style=\"color:blue;\"}: Data input and output\n-   [1130- 1200]{style=\"color:blue;\"}: Finding help\n-   [1200 - 1300]{style=\"color:blue;\"}: Lunch\n-   [1300 - 1400]{style=\"color:blue;\"}: Data mgmt\n-   [1400 - 1500]{style=\"color:blue;\"}: Plotting\n-   [1500 - 1600]{style=\"color:blue;\"}: Final Challenge\n\n## [Showcases]{style=\"color:green;\"}\n\nBrian - [R Shiny application](https://shiny.uri.edu/bgerber/GlobalDiel/) that allows users to subset data and visualize 14,586 results\n\n<br>\n\nKyle - example here\n\n<br>\n\nGeorgia - example here\n\n\n## [RStudio]{style=\"color:green;\"}\n\n![](RStudio1.png)\n\n## [RStudio]{style=\"color:green;\"}\n\n![](RStudio2.png)\n\n## [Installing Packages]{style=\"color:green;\"}\n\n![](RStudio4.png)\n\n## [The language of R]{style=\"color:green;\"}\n\n. . .\n\n### [**Objects**]{style=\"color:blue;\"}\n\nA storage place for information; stored in the \"Environment\"\n\n<br>\n\n::: fragment\n*'Attributes'* describes the structure or information of the object\n:::\n\n## [The language of R]{style=\"color:green;\"}\n### [**Objects**]{style=\"color:blue;\"}\n\n![](RStudio3.png)\n\n## [The language of R]{style=\"color:green;\"}\n\n### [**Objects**]{style=\"color:blue;\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# y is an 'object' that is assigned the value 3\ny = 3\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n# Same operation '=' '<-'\ny <- 3\n```\n:::\n\n:::\n\n## [The language of R]{style=\"color:green;\"}\n\n### [**Objects**]{style=\"color:blue;\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can create new objects from objects\ny2 = y-2\ny2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can do math with our objects\n# Mind your parentheses (order of operation)\ny*2 / y*4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\ny*2 / (y*4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5\n```\n\n\n:::\n:::\n\n:::\n\n## [Challenge 1]{style=\"color:green;\"} {.scrollable}\n\nCompute the diameter (d) of the Earth (in km) at the equator using this formula for the circumfrance (c)...\n\n$$d = \\frac{c}{\\pi}$$\n\n::: {style=\"font-size: 75%;\"}\n-   c = 24,901.55 miles\n-   1 km = 0.621 miles\n-   **Hint** type in 'pi' to see what you get\n:::\n\n::: {style=\"font-size: 75%;\"}\n1.  Convert the circumference from miles to km.\n2.  Write the formula in R by defining objects and the values given to computer d in km.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Click for Answer\"}\nc.km = 24901.55/0.621\n\nd = c.km/pi\n```\n:::\n\n\n\n\n## [The language of R]{style=\"color:green;\"}\n\n### [**Functions**]{style=\"color:blue;\"}\n\n'does stuff'; creates or manipulates objects\n\n::: fragment\n*'Arguments'* are the types of things a function is asking for; the inputs\n:::\n\n## [The language of R]{style=\"color:green;\"}\n\n[**object**]{style=\"color:orange;\"} = [function]{style=\"color:blue;\"}([attribute1]{style=\"color:purple;\"} = input1, [attribute2]{style=\"color:purple;\"} = input2)\n\n<br>\n\n. . .\n\n[**object**]{style=\"color:orange;\"} = [function]{style=\"color:blue;\"}(input1, input2)\n\n\n<br>\n\n. . .\n\n[**this**]{style=\"color:orange;\"} = [sign]{style=\"color:blue;\"}([x]{style=\"color:purple;\"} = -5)\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nsign(-5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1\n```\n\n\n:::\n\n```{.r .cell-code}\nsign(54)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n:::\n\n\n## [The language of R]{style=\"color:green;\"} {.scrollable}\n\n### [**Functions**]{style=\"color:blue;\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function - 'c' - concatenate\ny = c(1,2,3,4,5,6)\n```\n:::\n\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nis.numeric(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n# The function 'class' has the argument 'x'\nis.numeric(x = y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n:::\n\n## [The language of R]{style=\"color:green;\"}\n\n### [**Functions**]{style=\"color:blue;\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# How to find out the arguments of a function?\n?is.numeric\n```\n:::\n\n\n![](./index_files/is.numeric.png)\n\n## [The language of R]{style=\"color:green;\"}\n\n### Wrapping functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Functions are commonly 1) wrapped, 2) have multiple arguments\nx = matrix( \n            data = c(1,2,3,4,5,6),\n            nrow = 2,\n            ncol = 3\n            )\n```\n:::\n\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n:::\n\n\n:::\n\n## [The language of R]{style=\"color:green;\"}\n\n::: columns\n::: {.column width=\"50%\"}\n\n**Values**\n\n- numeric\n- integer\n- character\n- factor\n:::\n\n::: {.column width=\"50%\"}\n**Objects**\n\n- vector\n- matrix\n- array\n- list\n- dataframe\n- [S3, S4, S5, and beyond ]{style=\"color:purple;\"}\n:::\n:::\n\n\n## [Types of Values]{style=\"color:green;\"} {.scrollable}\n\n### Numeric\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\ny = 3\nclass(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n### Integer\n\n::: {.cell}\n\n```{.r .cell-code}\ny = integer(3)\nclass(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n### Character\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny = \"habitat\"\nclass(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n### Factor\n\n::: {.cell}\n\n```{.r .cell-code}\ny = factor(\"habitat\")\nclass(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n:::\n\n## [Types of Objects]{style=\"color:green;\"} {.scrollable}\n\n### Vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# An ordered collection indexed 1,2,...n\n# Using the function 'c' to concetanate\nz1 = c(4,5,6)\nz1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 5 6\n```\n\n\n:::\n:::\n\n\nThe value 4 is in element/index/position 1 of the vector\n\nThe value 6 is in element/index/position 3 of the vector\n\n\n<br>\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the dimension of a vector\nlength(z1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n# A vector of characters\nz2 = c(\"dog\",\"cat\",\"horse\")\nz2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"dog\"   \"cat\"   \"horse\"\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nz3 = c(\"dog\",\"1\",\"horse\")\nz3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"dog\"   \"1\"     \"horse\"\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nz3 = c(\"dog\",1,\"horse\")\nz3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"dog\"   \"1\"     \"horse\"\n```\n\n\n:::\n:::\n\n:::\n\n##  [Types of Objects]{style=\"color:green;\"}{.scrollable}\n\n### Subsetting a vector\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nz3 = c(\"dog\",\"1\",\"horse\",\"chicken\")\nz3[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n2:4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3 4\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nz3[2:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"       \"horse\"   \"chicken\"\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nz3[c(2,3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"     \"horse\"\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nz3[-1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"       \"horse\"   \"chicken\"\n```\n\n\n:::\n:::\n\n:::\n\n##  [Types of Objects]{style=\"color:green;\"}{.scrollable}\n\n### Vector of factors, a special kind of character string\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nz4 = factor(\n            c(\"dog\", \"dog\", \"cat\",\"horse\")\n           )\n```\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nz4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] dog   dog   cat   horse\nLevels: cat dog horse\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(z4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"cat\"   \"dog\"   \"horse\"\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(z4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  cat   dog horse \n    1     2     1 \n```\n\n\n:::\n:::\n\n:::\n\n## [Types of Objects]{style=\"color:green;\"}{.scrollable}\n\n### Matrix\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nx = matrix(\n            c(1,2,3,4,5,6),\n            nrow = 2, \n            ncol = 3\n           )\n```\n:::\n\n\n:::\n\n<br>\n\n::: fragment\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n:::\n\n\n:::\n\n<br>\n\n::: fragment\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#rows and columns\ndim(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3\n```\n\n\n:::\n:::\n\n\n:::\n\n<br>\n\n\n## [Types of Objects]{style=\"color:green;\"}{.scrollable}\n\n### Subsetting a matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get element of row 1 and column 2\nx[1,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n# get element of row 2 and column 3\nx[2,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n# get all elements of row 2\nx[2,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 6\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n# same as\nx[2,1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 6\n```\n\n\n:::\n:::\n\n:::\n\n## [Types of Objects]{style=\"color:green;\"}{.scrollable}\n\n### Array\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ARRAY - more than two dimensions\nz5 = array(\n            c(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"), \n            dim = c(2,2,2)\n           )\n```\n:::\n\n\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(z5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 2 2\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nz5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 1\n\n     [,1] [,2]\n[1,] \"a\"  \"c\" \n[2,] \"b\"  \"d\" \n\n, , 2\n\n     [,1] [,2]\n[1,] \"e\"  \"a\" \n[2,] \"f\"  \"b\" \n```\n\n\n:::\n:::\n\n:::\n\n## [Types of Objects]{style=\"color:green;\"}{.scrollable}\n\n### List\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n# LIST - a bucket - will take anything\nmy.list = list(z1, z2, z3, z4, z5)\n```\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n#Subset a list\nmy.list[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 5 6\n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.list[[4]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] dog   dog   cat   horse\nLevels: cat dog horse\n```\n\n\n:::\n:::\n\n:::\n\n## [Types of Objects]{style=\"color:green;\"}{.scrollable}\n\n### Data frame\n\nE.g., a row for each observation and a column for each variable (can be different types).\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nx = data.frame(outcome = c(1,0,1,1),\n               exposure = c(\"yes\", \"yes\", \"no\", \"no\"),\n               age = c(24, 55, 39, 18)\n               )\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  outcome exposure age\n1       1      yes  24\n2       0      yes  55\n3       1       no  39\n4       1       no  18\n```\n\n\n:::\n:::\n\n:::\n\n## [Types of Objects]{style=\"color:green;\"}{.scrollable}\n\n### Subset data.frame\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nx$exposure\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"yes\" \"yes\" \"no\"  \"no\" \n```\n\n\n:::\n:::\n\n:::\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nx['exposure']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  exposure\n1      yes\n2      yes\n3       no\n4       no\n```\n\n\n:::\n:::\n\n:::\n\n\n<br>\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nx[,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"yes\" \"yes\" \"no\"  \"no\" \n```\n\n\n:::\n:::\n\n:::\n\n\n## [Challenge 2]{style=\"color:green;\"} {.scrollable}\n\n1. Create a vector of numbers that has length 6; call this object 'vec1'.\n2. Use the function 'mean' to find the mean of the values of vec1.\n3. Subset vec1 to only elements 4 through 6. Call this new object 'vec1', thereby overwriting the original vec1.\n4. Create a new vector (length 3) of characters called \"hab1\", \"hab2\", and \"hab3\". Call this object 'vec2'.\n5. Put vec1 and vec2 together into a data frame and call this object 'dat'\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Click for Answer\"}\nvec1 = 1:6\nmean(vec1)\nvec1 = vec1[4:6]\nvec2 = c(\"hab1\",\"hab2\",\"hab3\")\ndat = data.frame(vec1,vec2)\ndat\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}